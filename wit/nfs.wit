interface nfs {
    type fh = list<u8>;
    type bytes = list<u8>;

    record time {
        seconds: u32,
        nseconds: u32,
    }

    record attr {
        attr-type: u32,
        file-mode: u32,
        nlink: u32,
        uid: u32,
        gid: u32,
        filesize: u64,
        used: u64,
        spec-data: tuple<u32, u32>,
        fsid: u64,
        fileid: u64,
        atime: time,
        mtime: time,
        ctime: time,
    }

    record obj-res {
        obj: fh,
        attr: option<attr>,
    }

    record path-conf {
        attr: option<attr>,
        linkmax: u32,
        name-max: u32,
        no-trunc: bool,
        chown-restricted: bool,
        case-insensitive: bool,
        case-preserving: bool,
    }

    record readdir-entry {
        fileid: u64,
        file-name: string,
        cookie: u64,
    }

    record readdirplus-entry {
        fileid: u64,
        file-name: string,
        cookie: u64,
        attr: option<attr>,
        handle: fh,
    }

    record error {
        nfs-error-code: option<s32>,
        message: string,
    }

    parse-url-and-mount: func(url: string) -> result<nfs-mount, error>;

    resource nfs-mount {
        null-op: func() -> result<_, error>;
        access: func(fh: fh, mode: u32) -> result<u32, error>;
        access-path: func(path: string, mode: u32) -> result<u32, error>;
        close: func(seqid: u32, stateid: u64) -> result<_, error>;
        commit: func(fh: fh, offset: u64, count: u32) -> result<_, error>;
        commit-path: func(path: string, offset: u64, count: u32) -> result<_, error>;
        create: func(dir-fh: fh, filename: string, mode: u32) -> result<obj-res, error>;
        create-path: func(path: string, mode: u32) -> result<obj-res, error>;
        delegpurge: func(clientid: u64) -> result<_, error>;
        delegreturn: func(stateid: u64) -> result<_, error>;
        getattr: func(fh: fh) -> result<attr, error>;
        getattr-path: func(path: string) -> result<attr, error>;
        setattr: func(fh: fh, guard-ctime: option<time>, mode: option<u32>, uid: option<u32>, gid: option<u32>, size: option<u64>, atime: option<time>, mtime: option<time>) -> result<_, error>;
        setattr-path: func(path: string, specify-guard: bool, mode: option<u32>, uid: option<u32>, gid: option<u32>, size: option<u64>, atime: option<time>, mtime: option<time>) -> result<_, error>;
        getfh: func() -> result<_, error>;
        link: func(src-fh: fh, dst-dir-fh: fh, dst-filename: string) -> result<attr, error>;
        link-path: func(src-path: string, dst-path: string) -> result<attr, error>;
        symlink: func(src-path: string, dst-dir-fh: fh, dst-filename: string) -> result<obj-res, error>;
        symlink-path: func(src-path: string, dst-path: string) -> result<obj-res, error>;
        readlink: func(fh: fh) -> result<string, error>;
        readlink-path: func(path: string) -> result<string, error>;
        lookup: func(dir-fh: fh, filename: string) -> result<obj-res, error>;
        lookup-path: func(path: string) -> result<obj-res, error>;
        pathconf: func(fh: fh) -> result<path-conf, error>;
        pathconf-path: func(path: string) -> result<path-conf, error>;
        read: func(fh: fh, offset: u64, count: u32) -> result<bytes, error>;
        read-path: func(path: string, offset: u64, count: u32) -> result<bytes, error>;
        write: func(fh: fh, offset: u64, data: bytes) -> result<u32, error>;
        write-path: func(path: string, offset: u64, data: bytes) -> result<u32, error>;
        readdir: func(dir-fh: fh) -> result<list<readdir-entry>, error>;
        readdir-path: func(dir-path: string) -> result<list<readdir-entry>, error>;
        readdirplus: func(dir-fh: fh) -> result<list<readdirplus-entry>, error>;
        readdirplus-path: func(dir-path: string) -> result<list<readdirplus-entry>, error>;
        mkdir: func(dir-fh: fh, dirname: string, mode: u32) -> result<obj-res, error>;
        mkdir-path: func(path: string, mode: u32) -> result<obj-res, error>;
        remove: func(dir-fh: fh, filename: string) -> result<_, error>;
        remove-path: func(path: string) -> result<_, error>;
        rmdir: func(dir-fh: fh, dirname: string) -> result<_, error>;
        rmdir-path: func(path: string) -> result<_, error>;
        rename: func(from-dir-fh: fh, from-filename: string, to-dir-fh: fh, to-filename: string) -> result<_, error>;
        rename-path: func(from-path: string, to-path: string) -> result<_, error>;
        umount: func() -> result<_, error>;
    }
}
