// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
pub mod wasi {
  pub mod clocks {
    
    #[allow(clippy::all)]
    pub mod monotonic_clock {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Pollable = super::super::super::wasi::io::poll::Pollable;
      /// An instant in time, in nanoseconds. An instant is relative to an
      /// unspecified initial value, and can only be compared to instances from
      /// the same monotonic-clock.
      pub type Instant = u64;
      /// A duration of time, in nanoseconds.
      pub type Duration = u64;
      #[allow(unused_unsafe, clippy::all)]
      /// Read the current value of the clock.
      /// 
      /// The clock is monotonic, therefore calling this function repeatedly will
      /// produce a sequence of non-decreasing values.
      pub fn now() -> Instant{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
          extern "C" {
            #[link_name = "now"]
            fn wit_import() -> i64;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i64{ unreachable!() }
          let ret = wit_import();
          ret as u64
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Query the resolution of the clock. Returns the duration of time
      /// corresponding to a clock tick.
      pub fn resolution() -> Duration{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
          extern "C" {
            #[link_name = "resolution"]
            fn wit_import() -> i64;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i64{ unreachable!() }
          let ret = wit_import();
          ret as u64
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Create a `pollable` which will resolve once the specified instant
      /// occured.
      pub fn subscribe_instant(when: Instant,) -> Pollable{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
          extern "C" {
            #[link_name = "subscribe-instant"]
            fn wit_import(_: i64, ) -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, ) -> i32{ unreachable!() }
          let ret = wit_import(wit_bindgen::rt::as_i64(when));
          super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Create a `pollable` which will resolve once the given duration has
      /// elapsed, starting at the time at which this function was called.
      /// occured.
      pub fn subscribe_duration(when: Duration,) -> Pollable{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.0")]
          extern "C" {
            #[link_name = "subscribe-duration"]
            fn wit_import(_: i64, ) -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i64, ) -> i32{ unreachable!() }
          let ret = wit_import(wit_bindgen::rt::as_i64(when));
          super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
        }
      }
      
    }
    
  }
  pub mod io {
    
    #[allow(clippy::all)]
    pub mod poll {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// `pollable` represents a single I/O event which may be ready, or not.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Pollable{
        handle: wit_bindgen::rt::Resource<Pollable>,
      }
      
      impl Pollable{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for Pollable{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
            extern "C" {
              #[link_name = "[resource-drop]pollable"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl Pollable {
        #[allow(unused_unsafe, clippy::all)]
        /// Return the readiness of a pollable. This function never blocks.
        /// 
        /// Returns `true` when the pollable is ready, and `false` otherwise.
        pub fn ready(&self,) -> bool{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
            extern "C" {
              #[link_name = "[method]pollable.ready"]
              fn wit_import(_: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32);
            wit_bindgen::rt::bool_lift(ret as u8)
          }
        }
      }
      impl Pollable {
        #[allow(unused_unsafe, clippy::all)]
        /// `block` returns immediately if the pollable is ready, and otherwise
        /// blocks until ready.
        /// 
        /// This function is equivalent to calling `poll.poll` on a list
        /// containing only this pollable.
        pub fn block(&self,){
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
            extern "C" {
              #[link_name = "[method]pollable.block"]
              fn wit_import(_: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ){ unreachable!() }
            wit_import((self).handle() as i32);
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Poll for completion on a set of pollables.
      /// 
      /// This function takes a list of pollables, which identify I/O sources of
      /// interest, and waits until one or more of the events is ready for I/O.
      /// 
      /// The result `list<u32>` contains one or more indices of handles in the
      /// argument list that is ready for I/O.
      /// 
      /// If the list contains more elements than can be indexed with a `u32`
      /// value, this function traps.
      /// 
      /// A timeout can be implemented by adding a pollable from the
      /// wasi-clocks API to the list.
      /// 
      /// This function does not return a `result`; polling in itself does not
      /// do any I/O so it doesn't fail. If any of the I/O sources identified by
      /// the pollables has an error, it is indicated by marking the source as
      /// being reaedy for I/O.
      pub fn poll(in_: &[&Pollable],) -> wit_bindgen::rt::vec::Vec::<u32>{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let vec0 = in_;
          let len0 = vec0.len() as i32;
          let layout0 = alloc::Layout::from_size_align_unchecked(vec0.len() * 4, 4);
          let result0 = if layout0.size() != 0
          {
            let ptr = alloc::alloc(layout0);
            if ptr.is_null()
            {
              alloc::handle_alloc_error(layout0);
            }
            ptr
          }else {{
            ::core::ptr::null_mut()
          }};
          for (i, e) in vec0.into_iter().enumerate() {
            let base = result0 as i32 + (i as i32) * 4;
            {
              *((base + 0) as *mut i32) = (e).handle() as i32;
            }
          }
          let ptr1 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:io/poll@0.2.0")]
          extern "C" {
            #[link_name = "poll"]
            fn wit_import(_: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(result0 as i32, len0, ptr1);
          let l2 = *((ptr1 + 0) as *const i32);
          let l3 = *((ptr1 + 4) as *const i32);
          let len4 = l3 as usize;
          if layout0.size() != 0 {
            alloc::dealloc(result0, layout0);
          }
          Vec::from_raw_parts(l2 as *mut _, len4, len4)
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod error {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// A resource which represents some error information.
      /// 
      /// The only method provided by this resource is `to-debug-string`,
      /// which provides some human-readable information about the error.
      /// 
      /// In the `wasi:io` package, this resource is returned through the
      /// `wasi:io/streams/stream-error` type.
      /// 
      /// To provide more specific error information, other interfaces may
      /// provide functions to further "downcast" this error into more specific
      /// error information. For example, `error`s returned in streams derived
      /// from filesystem types to be described using the filesystem's own
      /// error-code type, using the function
      /// `wasi:filesystem/types/filesystem-error-code`, which takes a parameter
      /// `borrow<error>` and returns
      /// `option<wasi:filesystem/types/error-code>`.
      /// 
      /// The set of functions which can "downcast" an `error` into a more
      /// concrete type is open.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct Error{
        handle: wit_bindgen::rt::Resource<Error>,
      }
      
      impl Error{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for Error{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:io/error@0.2.0")]
            extern "C" {
              #[link_name = "[resource-drop]error"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl Error {
        #[allow(unused_unsafe, clippy::all)]
        /// Returns a string that is suitable to assist humans in debugging
        /// this error.
        /// 
        /// WARNING: The returned string should not be consumed mechanically!
        /// It may change across platforms, hosts, or other implementation
        /// details. Parsing this string is a major platform-compatibility
        /// hazard.
        pub fn to_debug_string(&self,) -> wit_bindgen::rt::string::String{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 8]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/error@0.2.0")]
            extern "C" {
              #[link_name = "[method]error.to-debug-string"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = *((ptr0 + 0) as *const i32);
            let l2 = *((ptr0 + 4) as *const i32);
            let len3 = l2 as usize;
            let bytes3 = Vec::from_raw_parts(l1 as *mut _, len3, len3);
            wit_bindgen::rt::string_lift(bytes3)
          }
        }
      }
      
    }
    
    
    #[allow(clippy::all)]
    pub mod streams {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      pub type Error = super::super::super::wasi::io::error::Error;
      pub type Pollable = super::super::super::wasi::io::poll::Pollable;
      /// An error for input-stream and output-stream operations.
      pub enum StreamError{
        /// The last operation (a write or flush) failed before completion.
        /// 
        /// More information is available in the `error` payload.
        LastOperationFailed(Error),
        /// The stream is closed: no more input will be accepted by the
        /// stream. A closed output-stream will return this error on all
        /// future operations.
        Closed,
      }
      impl ::core::fmt::Debug for StreamError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            StreamError::LastOperationFailed(e) => {
              f.debug_tuple("StreamError::LastOperationFailed").field(e).finish()
            }
            StreamError::Closed => {
              f.debug_tuple("StreamError::Closed").finish()
            }
          }
        }
      }
      impl ::core::fmt::Display for StreamError {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          write!(f, "{:?}", self)
        }
      }
      
      impl std::error::Error for StreamError {}
      /// An input bytestream.
      /// 
      /// `input-stream`s are *non-blocking* to the extent practical on underlying
      /// platforms. I/O operations always return promptly; if fewer bytes are
      /// promptly available than requested, they return the number of bytes promptly
      /// available, which could even be zero. To wait for data to be available,
      /// use the `subscribe` function to obtain a `pollable` which can be polled
      /// for using `wasi:io/poll`.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct InputStream{
        handle: wit_bindgen::rt::Resource<InputStream>,
      }
      
      impl InputStream{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for InputStream{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
            extern "C" {
              #[link_name = "[resource-drop]input-stream"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      /// An output bytestream.
      /// 
      /// `output-stream`s are *non-blocking* to the extent practical on
      /// underlying platforms. Except where specified otherwise, I/O operations also
      /// always return promptly, after the number of bytes that can be written
      /// promptly, which could even be zero. To wait for the stream to be ready to
      /// accept data, the `subscribe` function to obtain a `pollable` which can be
      /// polled for using `wasi:io/poll`.
      
      #[derive(Debug)]
      #[repr(transparent)]
      pub struct OutputStream{
        handle: wit_bindgen::rt::Resource<OutputStream>,
      }
      
      impl OutputStream{
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
          Self {
            handle: wit_bindgen::rt::Resource::from_handle(handle),
          }
        }
        
        #[doc(hidden)]
        pub fn into_handle(self) -> u32 {
          wit_bindgen::rt::Resource::into_handle(self.handle)
        }
        
        #[doc(hidden)]
        pub fn handle(&self) -> u32 {
          wit_bindgen::rt::Resource::handle(&self.handle)
        }
      }
      
      
      unsafe impl wit_bindgen::rt::WasmResource for OutputStream{
        #[inline]
        unsafe fn drop(_handle: u32) {
          #[cfg(not(target_arch = "wasm32"))]
          unreachable!();
          
          #[cfg(target_arch = "wasm32")]
          {
            #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
            extern "C" {
              #[link_name = "[resource-drop]output-stream"]
              fn drop(_: u32);
            }
            
            drop(_handle);
          }
        }
      }
      
      impl InputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Perform a non-blocking read from the stream.
        /// 
        /// When the source of a `read` is binary data, the bytes from the source
        /// are returned verbatim. When the source of a `read` is known to the
        /// implementation to be text, bytes containing the UTF-8 encoding of the
        /// text are returned.
        /// 
        /// This function returns a list of bytes containing the read data,
        /// when successful. The returned list will contain up to `len` bytes;
        /// it may return fewer than requested, but not more. The list is
        /// empty when no bytes are available for reading at this time. The
        /// pollable given by `subscribe` will be ready when more bytes are
        /// available.
        /// 
        /// This function fails with a `stream-error` when the operation
        /// encounters an error, giving `last-operation-failed`, or when the
        /// stream is closed, giving `closed`.
        /// 
        /// When the caller gives a `len` of 0, it represents a request to
        /// read 0 bytes. If the stream is still open, this call should
        /// succeed and return an empty list, or otherwise fail with `closed`.
        /// 
        /// The `len` parameter is a `u64`, which could represent a list of u8 which
        /// is not possible to allocate in wasm32, or not desirable to allocate as
        /// as a return value by the callee. The callee may return a list of bytes
        /// less than `len` in size while more bytes are available for reading.
        pub fn read(&self,len: u64,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,StreamError>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
            extern "C" {
              #[link_name = "[method]input-stream.read"]
              fn wit_import(_: i32, _: i64, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(len), ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = *((ptr0 + 4) as *const i32);
                  let l3 = *((ptr0 + 8) as *const i32);
                  let len4 = l3 as usize;
                  
                  Vec::from_raw_parts(l2 as *mut _, len4, len4)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l5 = i32::from(*((ptr0 + 4) as *const u8));
                  let v7 = match l5 {
                    0 => {
                      let e7 = {
                        let l6 = *((ptr0 + 8) as *const i32);
                        
                        super::super::super::wasi::io::error::Error::from_handle(l6 as u32)
                      };
                      StreamError::LastOperationFailed(e7)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };
                  
                  v7
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl InputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Read bytes from a stream, after blocking until at least one byte can
        /// be read. Except for blocking, behavior is identical to `read`.
        pub fn blocking_read(&self,len: u64,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,StreamError>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
            extern "C" {
              #[link_name = "[method]input-stream.blocking-read"]
              fn wit_import(_: i32, _: i64, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(len), ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = *((ptr0 + 4) as *const i32);
                  let l3 = *((ptr0 + 8) as *const i32);
                  let len4 = l3 as usize;
                  
                  Vec::from_raw_parts(l2 as *mut _, len4, len4)
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l5 = i32::from(*((ptr0 + 4) as *const u8));
                  let v7 = match l5 {
                    0 => {
                      let e7 = {
                        let l6 = *((ptr0 + 8) as *const i32);
                        
                        super::super::super::wasi::io::error::Error::from_handle(l6 as u32)
                      };
                      StreamError::LastOperationFailed(e7)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };
                  
                  v7
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl InputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Skip bytes from a stream. Returns number of bytes skipped.
        /// 
        /// Behaves identical to `read`, except instead of returning a list
        /// of bytes, returns the number of bytes consumed from the stream.
        pub fn skip(&self,len: u64,) -> Result<u64,StreamError>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
            extern "C" {
              #[link_name = "[method]input-stream.skip"]
              fn wit_import(_: i32, _: i64, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(len), ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = *((ptr0 + 8) as *const i64);
                  
                  l2 as u64
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr0 + 8) as *const u8));
                  let v5 = match l3 {
                    0 => {
                      let e5 = {
                        let l4 = *((ptr0 + 12) as *const i32);
                        
                        super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                      };
                      StreamError::LastOperationFailed(e5)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };
                  
                  v5
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl InputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Skip bytes from a stream, after blocking until at least one byte
        /// can be skipped. Except for blocking behavior, identical to `skip`.
        pub fn blocking_skip(&self,len: u64,) -> Result<u64,StreamError>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
            extern "C" {
              #[link_name = "[method]input-stream.blocking-skip"]
              fn wit_import(_: i32, _: i64, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(len), ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = *((ptr0 + 8) as *const i64);
                  
                  l2 as u64
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr0 + 8) as *const u8));
                  let v5 = match l3 {
                    0 => {
                      let e5 = {
                        let l4 = *((ptr0 + 12) as *const i32);
                        
                        super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                      };
                      StreamError::LastOperationFailed(e5)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };
                  
                  v5
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl InputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Create a `pollable` which will resolve once either the specified stream
        /// has bytes available to read or the other end of the stream has been
        /// closed.
        /// The created `pollable` is a child resource of the `input-stream`.
        /// Implementations may trap if the `input-stream` is dropped before
        /// all derived `pollable`s created with this function are dropped.
        pub fn subscribe(&self,) -> Pollable{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
            extern "C" {
              #[link_name = "[method]input-stream.subscribe"]
              fn wit_import(_: i32, ) -> i32;
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, ) -> i32{ unreachable!() }
            let ret = wit_import((self).handle() as i32);
            super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Check readiness for writing. This function never blocks.
        /// 
        /// Returns the number of bytes permitted for the next call to `write`,
        /// or an error. Calling `write` with more bytes than this function has
        /// permitted will trap.
        /// 
        /// When this function returns 0 bytes, the `subscribe` pollable will
        /// become ready when this function will report at least 1 byte, or an
        /// error.
        pub fn check_write(&self,) -> Result<u64,StreamError>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(8))]
            struct RetArea([u8; 16]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let ptr0 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
            extern "C" {
              #[link_name = "[method]output-stream.check-write"]
              fn wit_import(_: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0);
            let l1 = i32::from(*((ptr0 + 0) as *const u8));
            match l1 {
              0 => {
                let e = {
                  let l2 = *((ptr0 + 8) as *const i64);
                  
                  l2 as u64
                };
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr0 + 8) as *const u8));
                  let v5 = match l3 {
                    0 => {
                      let e5 = {
                        let l4 = *((ptr0 + 12) as *const i32);
                        
                        super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                      };
                      StreamError::LastOperationFailed(e5)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };
                  
                  v5
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Perform a write. This function never blocks.
        /// 
        /// When the destination of a `write` is binary data, the bytes from
        /// `contents` are written verbatim. When the destination of a `write` is
        /// known to the implementation to be text, the bytes of `contents` are
        /// transcoded from UTF-8 into the encoding of the destination and then
        /// written.
        /// 
        /// Precondition: check-write gave permit of Ok(n) and contents has a
        /// length of less than or equal to n. Otherwise, this function will trap.
        /// 
        /// returns Err(closed) without writing if the stream has closed since
        /// the last call to check-write provided a permit.
        pub fn write(&self,contents: &[u8],) -> Result<(),StreamError>{
          
          #[allow(unused_imports)]
          use wit_bindgen::rt::{alloc, vec::Vec, string::String};
          unsafe {
            
            #[repr(align(4))]
            struct RetArea([u8; 12]);
            let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
            let vec0 = contents;
            let ptr0 = vec0.as_ptr() as i32;
            let len0 = vec0.len() as i32;
            let ptr1 = ret_area.as_mut_ptr() as i32;
            #[cfg(target_arch = "wasm32")]
            #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
            extern "C" {
              #[link_name = "[method]output-stream.write"]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, );
            }
            
            #[cfg(not(target_arch = "wasm32"))]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
            wit_import((self).handle() as i32, ptr0, len0, ptr1);
            let l2 = i32::from(*((ptr1 + 0) as *const u8));
            match l2 {
              0 => {
                let e = ();
                Ok(e)
              }
              1 => {
                let e = {
                  let l3 = i32::from(*((ptr1 + 4) as *const u8));
                  let v5 = match l3 {
                    0 => {
                      let e5 = {
                        let l4 = *((ptr1 + 8) as *const i32);
                        
                        super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                      };
                      StreamError::LastOperationFailed(e5)
                    }
                    n => {
                      debug_assert_eq!(n, 1, "invalid enum discriminant");
                      StreamError::Closed
                    }
                  };
                  
                  v5
                };
                Err(e)
              }
              _ => wit_bindgen::rt::invalid_enum_discriminant(),
            }
          }
        }
      }
      impl OutputStream {
        #[allow(unused_unsafe, clippy::all)]
        /// Perform a write of up to 4096 bytes, and then flush the stream. Block
        /// until all of these operations are complete, or an error occurs.
        /// 
        /// This is a convenience wrapper around the use of `check-write`,
        /// `subscribe`, `write`, and `flush`, and is implemented with the
        /// following pseudo-code:
        /// 
        /// ```text
        /// let pollable = this.subscribe();
        /// while !contents.is_empty() {
          /// // Wait for the stream to become writable
          /// pollable.block();
          /// let Ok(n) = this.check-write(); // eliding error handling
          /// let len = min(n, contents.len());
          /// let (chunk, rest) = contents.split_at(len);
          /// this.write(chunk  );            // eliding error handling
          /// contents = rest;
          /// }
          /// this.flush();
          /// // Wait for completion of `flush`
          /// pollable.block();
          /// // Check for any errors that arose during `flush`
          /// let _ = this.check-write();         // eliding error handling
          /// ```
          pub fn blocking_write_and_flush(&self,contents: &[u8],) -> Result<(),StreamError>{
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            unsafe {
              
              #[repr(align(4))]
              struct RetArea([u8; 12]);
              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
              let vec0 = contents;
              let ptr0 = vec0.as_ptr() as i32;
              let len0 = vec0.len() as i32;
              let ptr1 = ret_area.as_mut_ptr() as i32;
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
              extern "C" {
                #[link_name = "[method]output-stream.blocking-write-and-flush"]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, );
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
              wit_import((self).handle() as i32, ptr0, len0, ptr1);
              let l2 = i32::from(*((ptr1 + 0) as *const u8));
              match l2 {
                0 => {
                  let e = ();
                  Ok(e)
                }
                1 => {
                  let e = {
                    let l3 = i32::from(*((ptr1 + 4) as *const u8));
                    let v5 = match l3 {
                      0 => {
                        let e5 = {
                          let l4 = *((ptr1 + 8) as *const i32);
                          
                          super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                        };
                        StreamError::LastOperationFailed(e5)
                      }
                      n => {
                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                        StreamError::Closed
                      }
                    };
                    
                    v5
                  };
                  Err(e)
                }
                _ => wit_bindgen::rt::invalid_enum_discriminant(),
              }
            }
          }
        }
        impl OutputStream {
          #[allow(unused_unsafe, clippy::all)]
          /// Request to flush buffered output. This function never blocks.
          /// 
          /// This tells the output-stream that the caller intends any buffered
          /// output to be flushed. the output which is expected to be flushed
          /// is all that has been passed to `write` prior to this call.
          /// 
          /// Upon calling this function, the `output-stream` will not accept any
          /// writes (`check-write` will return `ok(0)`) until the flush has
          /// completed. The `subscribe` pollable will become ready when the
          /// flush has completed and the stream can accept more writes.
          pub fn flush(&self,) -> Result<(),StreamError>{
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            unsafe {
              
              #[repr(align(4))]
              struct RetArea([u8; 12]);
              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
              let ptr0 = ret_area.as_mut_ptr() as i32;
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
              extern "C" {
                #[link_name = "[method]output-stream.flush"]
                fn wit_import(_: i32, _: i32, );
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import(_: i32, _: i32, ){ unreachable!() }
              wit_import((self).handle() as i32, ptr0);
              let l1 = i32::from(*((ptr0 + 0) as *const u8));
              match l1 {
                0 => {
                  let e = ();
                  Ok(e)
                }
                1 => {
                  let e = {
                    let l2 = i32::from(*((ptr0 + 4) as *const u8));
                    let v4 = match l2 {
                      0 => {
                        let e4 = {
                          let l3 = *((ptr0 + 8) as *const i32);
                          
                          super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                        };
                        StreamError::LastOperationFailed(e4)
                      }
                      n => {
                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                        StreamError::Closed
                      }
                    };
                    
                    v4
                  };
                  Err(e)
                }
                _ => wit_bindgen::rt::invalid_enum_discriminant(),
              }
            }
          }
        }
        impl OutputStream {
          #[allow(unused_unsafe, clippy::all)]
          /// Request to flush buffered output, and block until flush completes
          /// and stream is ready for writing again.
          pub fn blocking_flush(&self,) -> Result<(),StreamError>{
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            unsafe {
              
              #[repr(align(4))]
              struct RetArea([u8; 12]);
              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
              let ptr0 = ret_area.as_mut_ptr() as i32;
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
              extern "C" {
                #[link_name = "[method]output-stream.blocking-flush"]
                fn wit_import(_: i32, _: i32, );
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import(_: i32, _: i32, ){ unreachable!() }
              wit_import((self).handle() as i32, ptr0);
              let l1 = i32::from(*((ptr0 + 0) as *const u8));
              match l1 {
                0 => {
                  let e = ();
                  Ok(e)
                }
                1 => {
                  let e = {
                    let l2 = i32::from(*((ptr0 + 4) as *const u8));
                    let v4 = match l2 {
                      0 => {
                        let e4 = {
                          let l3 = *((ptr0 + 8) as *const i32);
                          
                          super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                        };
                        StreamError::LastOperationFailed(e4)
                      }
                      n => {
                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                        StreamError::Closed
                      }
                    };
                    
                    v4
                  };
                  Err(e)
                }
                _ => wit_bindgen::rt::invalid_enum_discriminant(),
              }
            }
          }
        }
        impl OutputStream {
          #[allow(unused_unsafe, clippy::all)]
          /// Create a `pollable` which will resolve once the output-stream
          /// is ready for more writing, or an error has occured. When this
          /// pollable is ready, `check-write` will return `ok(n)` with n>0, or an
          /// error.
          /// 
          /// If the stream is closed, this pollable is always ready immediately.
          /// 
          /// The created `pollable` is a child resource of the `output-stream`.
          /// Implementations may trap if the `output-stream` is dropped before
          /// all derived `pollable`s created with this function are dropped.
          pub fn subscribe(&self,) -> Pollable{
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            unsafe {
              
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
              extern "C" {
                #[link_name = "[method]output-stream.subscribe"]
                fn wit_import(_: i32, ) -> i32;
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import(_: i32, ) -> i32{ unreachable!() }
              let ret = wit_import((self).handle() as i32);
              super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
            }
          }
        }
        impl OutputStream {
          #[allow(unused_unsafe, clippy::all)]
          /// Write zeroes to a stream.
          /// 
          /// This should be used precisely like `write` with the exact same
          /// preconditions (must use check-write first), but instead of
          /// passing a list of bytes, you simply pass the number of zero-bytes
          /// that should be written.
          pub fn write_zeroes(&self,len: u64,) -> Result<(),StreamError>{
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            unsafe {
              
              #[repr(align(4))]
              struct RetArea([u8; 12]);
              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
              let ptr0 = ret_area.as_mut_ptr() as i32;
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
              extern "C" {
                #[link_name = "[method]output-stream.write-zeroes"]
                fn wit_import(_: i32, _: i64, _: i32, );
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
              wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(len), ptr0);
              let l1 = i32::from(*((ptr0 + 0) as *const u8));
              match l1 {
                0 => {
                  let e = ();
                  Ok(e)
                }
                1 => {
                  let e = {
                    let l2 = i32::from(*((ptr0 + 4) as *const u8));
                    let v4 = match l2 {
                      0 => {
                        let e4 = {
                          let l3 = *((ptr0 + 8) as *const i32);
                          
                          super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                        };
                        StreamError::LastOperationFailed(e4)
                      }
                      n => {
                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                        StreamError::Closed
                      }
                    };
                    
                    v4
                  };
                  Err(e)
                }
                _ => wit_bindgen::rt::invalid_enum_discriminant(),
              }
            }
          }
        }
        impl OutputStream {
          #[allow(unused_unsafe, clippy::all)]
          /// Perform a write of up to 4096 zeroes, and then flush the stream.
          /// Block until all of these operations are complete, or an error
          /// occurs.
          /// 
          /// This is a convenience wrapper around the use of `check-write`,
          /// `subscribe`, `write-zeroes`, and `flush`, and is implemented with
          /// the following pseudo-code:
          /// 
          /// ```text
          /// let pollable = this.subscribe();
          /// while num_zeroes != 0 {
            /// // Wait for the stream to become writable
            /// pollable.block();
            /// let Ok(n) = this.check-write(); // eliding error handling
            /// let len = min(n, num_zeroes);
            /// this.write-zeroes(len);         // eliding error handling
            /// num_zeroes -= len;
            /// }
            /// this.flush();
            /// // Wait for completion of `flush`
            /// pollable.block();
            /// // Check for any errors that arose during `flush`
            /// let _ = this.check-write();         // eliding error handling
            /// ```
            pub fn blocking_write_zeroes_and_flush(&self,len: u64,) -> Result<(),StreamError>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(4))]
                struct RetArea([u8; 12]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                extern "C" {
                  #[link_name = "[method]output-stream.blocking-write-zeroes-and-flush"]
                  fn wit_import(_: i32, _: i64, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(len), ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 4) as *const u8));
                      let v4 = match l2 {
                        0 => {
                          let e4 = {
                            let l3 = *((ptr0 + 8) as *const i32);
                            
                            super::super::super::wasi::io::error::Error::from_handle(l3 as u32)
                          };
                          StreamError::LastOperationFailed(e4)
                        }
                        n => {
                          debug_assert_eq!(n, 1, "invalid enum discriminant");
                          StreamError::Closed
                        }
                      };
                      
                      v4
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl OutputStream {
            #[allow(unused_unsafe, clippy::all)]
            /// Read from one stream and write to another.
            /// 
            /// The behavior of splice is equivelant to:
            /// 1. calling `check-write` on the `output-stream`
            /// 2. calling `read` on the `input-stream` with the smaller of the
            /// `check-write` permitted length and the `len` provided to `splice`
            /// 3. calling `write` on the `output-stream` with that read data.
            /// 
            /// Any error reported by the call to `check-write`, `read`, or
            /// `write` ends the splice and reports that error.
            /// 
            /// This function returns the number of bytes transferred; it may be less
            /// than `len`.
            pub fn splice(&self,src: &InputStream,len: u64,) -> Result<u64,StreamError>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(8))]
                struct RetArea([u8; 16]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                extern "C" {
                  #[link_name = "[method]output-stream.splice"]
                  fn wit_import(_: i32, _: i32, _: i64, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, _: i64, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, (src).handle() as i32, wit_bindgen::rt::as_i64(len), ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = *((ptr0 + 8) as *const i64);
                      
                      l2 as u64
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l3 = i32::from(*((ptr0 + 8) as *const u8));
                      let v5 = match l3 {
                        0 => {
                          let e5 = {
                            let l4 = *((ptr0 + 12) as *const i32);
                            
                            super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                          };
                          StreamError::LastOperationFailed(e5)
                        }
                        n => {
                          debug_assert_eq!(n, 1, "invalid enum discriminant");
                          StreamError::Closed
                        }
                      };
                      
                      v5
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl OutputStream {
            #[allow(unused_unsafe, clippy::all)]
            /// Read from one stream and write to another, with blocking.
            /// 
            /// This is similar to `splice`, except that it blocks until the
            /// `output-stream` is ready for writing, and the `input-stream`
            /// is ready for reading, before performing the `splice`.
            pub fn blocking_splice(&self,src: &InputStream,len: u64,) -> Result<u64,StreamError>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(8))]
                struct RetArea([u8; 16]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:io/streams@0.2.0")]
                extern "C" {
                  #[link_name = "[method]output-stream.blocking-splice"]
                  fn wit_import(_: i32, _: i32, _: i64, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, _: i64, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, (src).handle() as i32, wit_bindgen::rt::as_i64(len), ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = *((ptr0 + 8) as *const i64);
                      
                      l2 as u64
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l3 = i32::from(*((ptr0 + 8) as *const u8));
                      let v5 = match l3 {
                        0 => {
                          let e5 = {
                            let l4 = *((ptr0 + 12) as *const i32);
                            
                            super::super::super::wasi::io::error::Error::from_handle(l4 as u32)
                          };
                          StreamError::LastOperationFailed(e5)
                        }
                        n => {
                          debug_assert_eq!(n, 1, "invalid enum discriminant");
                          StreamError::Closed
                        }
                      };
                      
                      v5
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          
        }
        
      }
      pub mod sockets {
        
        #[allow(clippy::all)]
        pub mod network {
          #[used]
          #[doc(hidden)]
          #[cfg(target_arch = "wasm32")]
          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
          /// An opaque resource that represents access to (a subset of) the network.
          /// This enables context-based security for networking.
          /// There is no need for this to map 1:1 to a physical network interface.
          
          #[derive(Debug)]
          #[repr(transparent)]
          pub struct Network{
            handle: wit_bindgen::rt::Resource<Network>,
          }
          
          impl Network{
            #[doc(hidden)]
            pub unsafe fn from_handle(handle: u32) -> Self {
              Self {
                handle: wit_bindgen::rt::Resource::from_handle(handle),
              }
            }
            
            #[doc(hidden)]
            pub fn into_handle(self) -> u32 {
              wit_bindgen::rt::Resource::into_handle(self.handle)
            }
            
            #[doc(hidden)]
            pub fn handle(&self) -> u32 {
              wit_bindgen::rt::Resource::handle(&self.handle)
            }
          }
          
          
          unsafe impl wit_bindgen::rt::WasmResource for Network{
            #[inline]
            unsafe fn drop(_handle: u32) {
              #[cfg(not(target_arch = "wasm32"))]
              unreachable!();
              
              #[cfg(target_arch = "wasm32")]
              {
                #[link(wasm_import_module = "wasi:sockets/network@0.2.0")]
                extern "C" {
                  #[link_name = "[resource-drop]network"]
                  fn drop(_: u32);
                }
                
                drop(_handle);
              }
            }
          }
          
          /// Error codes.
          /// 
          /// In theory, every API can return any error code.
          /// In practice, API's typically only return the errors documented per API
          /// combined with a couple of errors that are always possible:
          /// - `unknown`
          /// - `access-denied`
          /// - `not-supported`
          /// - `out-of-memory`
          /// - `concurrency-conflict`
          /// 
          /// See each individual API for what the POSIX equivalents are. They sometimes differ per API.
          #[repr(u8)]
          #[derive(Clone, Copy, Eq, PartialEq)]
          pub enum ErrorCode {
            /// Unknown error
            Unknown,
            /// Access denied.
            /// 
            /// POSIX equivalent: EACCES, EPERM
            AccessDenied,
            /// The operation is not supported.
            /// 
            /// POSIX equivalent: EOPNOTSUPP
            NotSupported,
            /// One of the arguments is invalid.
            /// 
            /// POSIX equivalent: EINVAL
            InvalidArgument,
            /// Not enough memory to complete the operation.
            /// 
            /// POSIX equivalent: ENOMEM, ENOBUFS, EAI_MEMORY
            OutOfMemory,
            /// The operation timed out before it could finish completely.
            Timeout,
            /// This operation is incompatible with another asynchronous operation that is already in progress.
            /// 
            /// POSIX equivalent: EALREADY
            ConcurrencyConflict,
            /// Trying to finish an asynchronous operation that:
            /// - has not been started yet, or:
            /// - was already finished by a previous `finish-*` call.
            /// 
            /// Note: this is scheduled to be removed when `future`s are natively supported.
            NotInProgress,
            /// The operation has been aborted because it could not be completed immediately.
            /// 
            /// Note: this is scheduled to be removed when `future`s are natively supported.
            WouldBlock,
            /// The operation is not valid in the socket's current state.
            InvalidState,
            /// A new socket resource could not be created because of a system limit.
            NewSocketLimit,
            /// A bind operation failed because the provided address is not an address that the `network` can bind to.
            AddressNotBindable,
            /// A bind operation failed because the provided address is already in use or because there are no ephemeral ports available.
            AddressInUse,
            /// The remote address is not reachable
            RemoteUnreachable,
            /// The TCP connection was forcefully rejected
            ConnectionRefused,
            /// The TCP connection was reset.
            ConnectionReset,
            /// A TCP connection was aborted.
            ConnectionAborted,
            /// The size of a datagram sent to a UDP socket exceeded the maximum
            /// supported size.
            DatagramTooLarge,
            /// Name does not exist or has no suitable associated IP addresses.
            NameUnresolvable,
            /// A temporary failure in name resolution occurred.
            TemporaryResolverFailure,
            /// A permanent failure in name resolution occurred.
            PermanentResolverFailure,
          }
          impl ErrorCode{
            pub fn name(&self) -> &'static str {
              match self {
                ErrorCode::Unknown => "unknown",
                ErrorCode::AccessDenied => "access-denied",
                ErrorCode::NotSupported => "not-supported",
                ErrorCode::InvalidArgument => "invalid-argument",
                ErrorCode::OutOfMemory => "out-of-memory",
                ErrorCode::Timeout => "timeout",
                ErrorCode::ConcurrencyConflict => "concurrency-conflict",
                ErrorCode::NotInProgress => "not-in-progress",
                ErrorCode::WouldBlock => "would-block",
                ErrorCode::InvalidState => "invalid-state",
                ErrorCode::NewSocketLimit => "new-socket-limit",
                ErrorCode::AddressNotBindable => "address-not-bindable",
                ErrorCode::AddressInUse => "address-in-use",
                ErrorCode::RemoteUnreachable => "remote-unreachable",
                ErrorCode::ConnectionRefused => "connection-refused",
                ErrorCode::ConnectionReset => "connection-reset",
                ErrorCode::ConnectionAborted => "connection-aborted",
                ErrorCode::DatagramTooLarge => "datagram-too-large",
                ErrorCode::NameUnresolvable => "name-unresolvable",
                ErrorCode::TemporaryResolverFailure => "temporary-resolver-failure",
                ErrorCode::PermanentResolverFailure => "permanent-resolver-failure",
              }
            }
            pub fn message(&self) -> &'static str {
              match self {
                ErrorCode::Unknown => "Unknown error",
                ErrorCode::AccessDenied => "Access denied.
                
                POSIX equivalent: EACCES, EPERM",
                ErrorCode::NotSupported => "The operation is not supported.
                
                POSIX equivalent: EOPNOTSUPP",
                ErrorCode::InvalidArgument => "One of the arguments is invalid.
                
                POSIX equivalent: EINVAL",
                ErrorCode::OutOfMemory => "Not enough memory to complete the operation.
                
                POSIX equivalent: ENOMEM, ENOBUFS, EAI_MEMORY",
                ErrorCode::Timeout => "The operation timed out before it could finish completely.",
                ErrorCode::ConcurrencyConflict => "This operation is incompatible with another asynchronous operation that is already in progress.
                
                POSIX equivalent: EALREADY",
                ErrorCode::NotInProgress => "Trying to finish an asynchronous operation that:
                - has not been started yet, or:
                - was already finished by a previous `finish-*` call.
                
                Note: this is scheduled to be removed when `future`s are natively supported.",
                ErrorCode::WouldBlock => "The operation has been aborted because it could not be completed immediately.
                
                Note: this is scheduled to be removed when `future`s are natively supported.",
                ErrorCode::InvalidState => "The operation is not valid in the socket's current state.",
                ErrorCode::NewSocketLimit => "A new socket resource could not be created because of a system limit.",
                ErrorCode::AddressNotBindable => "A bind operation failed because the provided address is not an address that the `network` can bind to.",
                ErrorCode::AddressInUse => "A bind operation failed because the provided address is already in use or because there are no ephemeral ports available.",
                ErrorCode::RemoteUnreachable => "The remote address is not reachable",
                ErrorCode::ConnectionRefused => "The TCP connection was forcefully rejected",
                ErrorCode::ConnectionReset => "The TCP connection was reset.",
                ErrorCode::ConnectionAborted => "A TCP connection was aborted.",
                ErrorCode::DatagramTooLarge => "The size of a datagram sent to a UDP socket exceeded the maximum
                supported size.",
                ErrorCode::NameUnresolvable => "Name does not exist or has no suitable associated IP addresses.",
                ErrorCode::TemporaryResolverFailure => "A temporary failure in name resolution occurred.",
                ErrorCode::PermanentResolverFailure => "A permanent failure in name resolution occurred.",
              }
            }
          }
          impl ::core::fmt::Debug for ErrorCode{
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              f.debug_struct("ErrorCode")
              .field("code", &(*self as i32))
              .field("name", &self.name())
              .field("message", &self.message())
              .finish()
            }
          }
          impl ::core::fmt::Display for ErrorCode{
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              write!(f, "{} (error {})", self.name(), *self as i32)
            }
          }
          
          impl std::error::Error for ErrorCode{}
          
          impl ErrorCode{
            pub(crate) unsafe fn _lift(val: u8) -> ErrorCode{
              if !cfg!(debug_assertions) {
                return ::core::mem::transmute(val);
              }
              
              match val {
                0 => ErrorCode::Unknown,
                1 => ErrorCode::AccessDenied,
                2 => ErrorCode::NotSupported,
                3 => ErrorCode::InvalidArgument,
                4 => ErrorCode::OutOfMemory,
                5 => ErrorCode::Timeout,
                6 => ErrorCode::ConcurrencyConflict,
                7 => ErrorCode::NotInProgress,
                8 => ErrorCode::WouldBlock,
                9 => ErrorCode::InvalidState,
                10 => ErrorCode::NewSocketLimit,
                11 => ErrorCode::AddressNotBindable,
                12 => ErrorCode::AddressInUse,
                13 => ErrorCode::RemoteUnreachable,
                14 => ErrorCode::ConnectionRefused,
                15 => ErrorCode::ConnectionReset,
                16 => ErrorCode::ConnectionAborted,
                17 => ErrorCode::DatagramTooLarge,
                18 => ErrorCode::NameUnresolvable,
                19 => ErrorCode::TemporaryResolverFailure,
                20 => ErrorCode::PermanentResolverFailure,
                
                _ => panic!("invalid enum discriminant"),
              }
            }
          }
          
          #[repr(u8)]
          #[derive(Clone, Copy, Eq, PartialEq)]
          pub enum IpAddressFamily {
            /// Similar to `AF_INET` in POSIX.
            Ipv4,
            /// Similar to `AF_INET6` in POSIX.
            Ipv6,
          }
          impl ::core::fmt::Debug for IpAddressFamily {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              match self {
                IpAddressFamily::Ipv4 => {
                  f.debug_tuple("IpAddressFamily::Ipv4").finish()
                }
                IpAddressFamily::Ipv6 => {
                  f.debug_tuple("IpAddressFamily::Ipv6").finish()
                }
              }
            }
          }
          
          impl IpAddressFamily{
            pub(crate) unsafe fn _lift(val: u8) -> IpAddressFamily{
              if !cfg!(debug_assertions) {
                return ::core::mem::transmute(val);
              }
              
              match val {
                0 => IpAddressFamily::Ipv4,
                1 => IpAddressFamily::Ipv6,
                
                _ => panic!("invalid enum discriminant"),
              }
            }
          }
          
          pub type Ipv4Address = (u8,u8,u8,u8,);
          pub type Ipv6Address = (u16,u16,u16,u16,u16,u16,u16,u16,);
          #[derive(Clone, Copy)]
          pub enum IpAddress{
            Ipv4(Ipv4Address),
            Ipv6(Ipv6Address),
          }
          impl ::core::fmt::Debug for IpAddress {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              match self {
                IpAddress::Ipv4(e) => {
                  f.debug_tuple("IpAddress::Ipv4").field(e).finish()
                }
                IpAddress::Ipv6(e) => {
                  f.debug_tuple("IpAddress::Ipv6").field(e).finish()
                }
              }
            }
          }
          #[repr(C)]
          #[derive(Clone, Copy)]
          pub struct Ipv4SocketAddress {
            /// sin_port
            pub port: u16,
            /// sin_addr
            pub address: Ipv4Address,
          }
          impl ::core::fmt::Debug for Ipv4SocketAddress {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              f.debug_struct("Ipv4SocketAddress").field("port", &self.port).field("address", &self.address).finish()
            }
          }
          #[repr(C)]
          #[derive(Clone, Copy)]
          pub struct Ipv6SocketAddress {
            /// sin6_port
            pub port: u16,
            /// sin6_flowinfo
            pub flow_info: u32,
            /// sin6_addr
            pub address: Ipv6Address,
            /// sin6_scope_id
            pub scope_id: u32,
          }
          impl ::core::fmt::Debug for Ipv6SocketAddress {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              f.debug_struct("Ipv6SocketAddress").field("port", &self.port).field("flow-info", &self.flow_info).field("address", &self.address).field("scope-id", &self.scope_id).finish()
            }
          }
          #[derive(Clone, Copy)]
          pub enum IpSocketAddress{
            Ipv4(Ipv4SocketAddress),
            Ipv6(Ipv6SocketAddress),
          }
          impl ::core::fmt::Debug for IpSocketAddress {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              match self {
                IpSocketAddress::Ipv4(e) => {
                  f.debug_tuple("IpSocketAddress::Ipv4").field(e).finish()
                }
                IpSocketAddress::Ipv6(e) => {
                  f.debug_tuple("IpSocketAddress::Ipv6").field(e).finish()
                }
              }
            }
          }
          
        }
        
        
        #[allow(clippy::all)]
        pub mod instance_network {
          #[used]
          #[doc(hidden)]
          #[cfg(target_arch = "wasm32")]
          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
          pub type Network = super::super::super::wasi::sockets::network::Network;
          #[allow(unused_unsafe, clippy::all)]
          /// Get a handle to the default network.
          pub fn instance_network() -> Network{
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            unsafe {
              
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "wasi:sockets/instance-network@0.2.0")]
              extern "C" {
                #[link_name = "instance-network"]
                fn wit_import() -> i32;
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import() -> i32{ unreachable!() }
              let ret = wit_import();
              super::super::super::wasi::sockets::network::Network::from_handle(ret as u32)
            }
          }
          
        }
        
        
        #[allow(clippy::all)]
        pub mod ip_name_lookup {
          #[used]
          #[doc(hidden)]
          #[cfg(target_arch = "wasm32")]
          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
          pub type Pollable = super::super::super::wasi::io::poll::Pollable;
          pub type Network = super::super::super::wasi::sockets::network::Network;
          pub type ErrorCode = super::super::super::wasi::sockets::network::ErrorCode;
          pub type IpAddress = super::super::super::wasi::sockets::network::IpAddress;
          
          #[derive(Debug)]
          #[repr(transparent)]
          pub struct ResolveAddressStream{
            handle: wit_bindgen::rt::Resource<ResolveAddressStream>,
          }
          
          impl ResolveAddressStream{
            #[doc(hidden)]
            pub unsafe fn from_handle(handle: u32) -> Self {
              Self {
                handle: wit_bindgen::rt::Resource::from_handle(handle),
              }
            }
            
            #[doc(hidden)]
            pub fn into_handle(self) -> u32 {
              wit_bindgen::rt::Resource::into_handle(self.handle)
            }
            
            #[doc(hidden)]
            pub fn handle(&self) -> u32 {
              wit_bindgen::rt::Resource::handle(&self.handle)
            }
          }
          
          
          unsafe impl wit_bindgen::rt::WasmResource for ResolveAddressStream{
            #[inline]
            unsafe fn drop(_handle: u32) {
              #[cfg(not(target_arch = "wasm32"))]
              unreachable!();
              
              #[cfg(target_arch = "wasm32")]
              {
                #[link(wasm_import_module = "wasi:sockets/ip-name-lookup@0.2.0")]
                extern "C" {
                  #[link_name = "[resource-drop]resolve-address-stream"]
                  fn drop(_: u32);
                }
                
                drop(_handle);
              }
            }
          }
          
          #[allow(unused_unsafe, clippy::all)]
          /// Resolve an internet host name to a list of IP addresses.
          /// 
          /// Unicode domain names are automatically converted to ASCII using IDNA encoding.
          /// If the input is an IP address string, the address is parsed and returned
          /// as-is without making any external requests.
          /// 
          /// See the wasi-socket proposal README.md for a comparison with getaddrinfo.
          /// 
          /// This function never blocks. It either immediately fails or immediately
          /// returns successfully with a `resolve-address-stream` that can be used
          /// to (asynchronously) fetch the results.
          /// 
          /// # Typical errors
          /// - `invalid-argument`: `name` is a syntactically invalid domain name or IP address.
          /// 
          /// # References:
          /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html>
          /// - <https://man7.org/linux/man-pages/man3/getaddrinfo.3.html>
          /// - <https://learn.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo>
          /// - <https://man.freebsd.org/cgi/man.cgi?query=getaddrinfo&sektion=3>
          pub fn resolve_addresses(network: &Network,name: &str,) -> Result<ResolveAddressStream,ErrorCode>{
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            unsafe {
              
              #[repr(align(4))]
              struct RetArea([u8; 8]);
              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
              let vec0 = name;
              let ptr0 = vec0.as_ptr() as i32;
              let len0 = vec0.len() as i32;
              let ptr1 = ret_area.as_mut_ptr() as i32;
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "wasi:sockets/ip-name-lookup@0.2.0")]
              extern "C" {
                #[link_name = "resolve-addresses"]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, );
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import(_: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
              wit_import((network).handle() as i32, ptr0, len0, ptr1);
              let l2 = i32::from(*((ptr1 + 0) as *const u8));
              match l2 {
                0 => {
                  let e = {
                    let l3 = *((ptr1 + 4) as *const i32);
                    
                    ResolveAddressStream::from_handle(l3 as u32)
                  };
                  Ok(e)
                }
                1 => {
                  let e = {
                    let l4 = i32::from(*((ptr1 + 4) as *const u8));
                    
                    super::super::super::wasi::sockets::network::ErrorCode::_lift(l4 as u8)
                  };
                  Err(e)
                }
                _ => wit_bindgen::rt::invalid_enum_discriminant(),
              }
            }
          }
          impl ResolveAddressStream {
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the next address from the resolver.
            /// 
            /// This function should be called multiple times. On each call, it will
            /// return the next address in connection order preference. If all
            /// addresses have been exhausted, this function returns `none`.
            /// 
            /// This function never returns IPv4-mapped IPv6 addresses.
            /// 
            /// # Typical errors
            /// - `name-unresolvable`:          Name does not exist or has no suitable associated IP addresses. (EAI_NONAME, EAI_NODATA, EAI_ADDRFAMILY)
            /// - `temporary-resolver-failure`: A temporary failure in name resolution occurred. (EAI_AGAIN)
            /// - `permanent-resolver-failure`: A permanent failure in name resolution occurred. (EAI_FAIL)
            /// - `would-block`:                A result is not available yet. (EWOULDBLOCK, EAGAIN)
            pub fn resolve_next_address(&self,) -> Result<Option<IpAddress>,ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(2))]
                struct RetArea([u8; 22]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/ip-name-lookup@0.2.0")]
                extern "C" {
                  #[link_name = "[method]resolve-address-stream.resolve-next-address"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 2) as *const u8));
                      
                      match l2 {
                        0 => None,
                        1 => {
                          let e = {
                            let l3 = i32::from(*((ptr0 + 4) as *const u8));
                            use super::super::super::wasi::sockets::network::IpAddress as V16;
                            let v16 = match l3 {
                              0 => {
                                let e16 = {
                                  let l4 = i32::from(*((ptr0 + 6) as *const u8));
                                  let l5 = i32::from(*((ptr0 + 7) as *const u8));
                                  let l6 = i32::from(*((ptr0 + 8) as *const u8));
                                  let l7 = i32::from(*((ptr0 + 9) as *const u8));
                                  
                                  (l4 as u8, l5 as u8, l6 as u8, l7 as u8)
                                };
                                V16::Ipv4(e16)
                              }
                              n => {
                                debug_assert_eq!(n, 1, "invalid enum discriminant");
                                let e16 = {
                                  let l8 = i32::from(*((ptr0 + 6) as *const u16));
                                  let l9 = i32::from(*((ptr0 + 8) as *const u16));
                                  let l10 = i32::from(*((ptr0 + 10) as *const u16));
                                  let l11 = i32::from(*((ptr0 + 12) as *const u16));
                                  let l12 = i32::from(*((ptr0 + 14) as *const u16));
                                  let l13 = i32::from(*((ptr0 + 16) as *const u16));
                                  let l14 = i32::from(*((ptr0 + 18) as *const u16));
                                  let l15 = i32::from(*((ptr0 + 20) as *const u16));
                                  
                                  (l8 as u16, l9 as u16, l10 as u16, l11 as u16, l12 as u16, l13 as u16, l14 as u16, l15 as u16)
                                };
                                V16::Ipv6(e16)
                              }
                            };
                            
                            v16
                          };
                          Some(e)
                        }
                        _ => wit_bindgen::rt::invalid_enum_discriminant(),
                      }
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l17 = i32::from(*((ptr0 + 2) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l17 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl ResolveAddressStream {
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the stream is ready for I/O.
            /// 
            /// Note: this function is here for WASI Preview2 only.
            /// It's planned to be removed when `future` is natively supported in Preview3.
            pub fn subscribe(&self,) -> Pollable{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/ip-name-lookup@0.2.0")]
                extern "C" {
                  #[link_name = "[method]resolve-address-stream.subscribe"]
                  fn wit_import(_: i32, ) -> i32;
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, ) -> i32{ unreachable!() }
                let ret = wit_import((self).handle() as i32);
                super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
              }
            }
          }
          
        }
        
        
        #[allow(clippy::all)]
        pub mod tcp {
          #[used]
          #[doc(hidden)]
          #[cfg(target_arch = "wasm32")]
          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
          pub type InputStream = super::super::super::wasi::io::streams::InputStream;
          pub type OutputStream = super::super::super::wasi::io::streams::OutputStream;
          pub type Pollable = super::super::super::wasi::io::poll::Pollable;
          pub type Duration = super::super::super::wasi::clocks::monotonic_clock::Duration;
          pub type Network = super::super::super::wasi::sockets::network::Network;
          pub type ErrorCode = super::super::super::wasi::sockets::network::ErrorCode;
          pub type IpSocketAddress = super::super::super::wasi::sockets::network::IpSocketAddress;
          pub type IpAddressFamily = super::super::super::wasi::sockets::network::IpAddressFamily;
          #[repr(u8)]
          #[derive(Clone, Copy, Eq, PartialEq)]
          pub enum ShutdownType {
            /// Similar to `SHUT_RD` in POSIX.
            Receive,
            /// Similar to `SHUT_WR` in POSIX.
            Send,
            /// Similar to `SHUT_RDWR` in POSIX.
            Both,
          }
          impl ::core::fmt::Debug for ShutdownType {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
              match self {
                ShutdownType::Receive => {
                  f.debug_tuple("ShutdownType::Receive").finish()
                }
                ShutdownType::Send => {
                  f.debug_tuple("ShutdownType::Send").finish()
                }
                ShutdownType::Both => {
                  f.debug_tuple("ShutdownType::Both").finish()
                }
              }
            }
          }
          
          impl ShutdownType{
            pub(crate) unsafe fn _lift(val: u8) -> ShutdownType{
              if !cfg!(debug_assertions) {
                return ::core::mem::transmute(val);
              }
              
              match val {
                0 => ShutdownType::Receive,
                1 => ShutdownType::Send,
                2 => ShutdownType::Both,
                
                _ => panic!("invalid enum discriminant"),
              }
            }
          }
          
          /// A TCP socket resource.
          /// 
          /// The socket can be in one of the following states:
          /// - `unbound`
          /// - `bind-in-progress`
          /// - `bound` (See note below)
          /// - `listen-in-progress`
          /// - `listening`
          /// - `connect-in-progress`
          /// - `connected`
          /// - `closed`
          /// See <https://github.com/WebAssembly/wasi-sockets/TcpSocketOperationalSemantics.md>
          /// for a more information.
          /// 
          /// Note: Except where explicitly mentioned, whenever this documentation uses
          /// the term "bound" without backticks it actually means: in the `bound` state *or higher*.
          /// (i.e. `bound`, `listen-in-progress`, `listening`, `connect-in-progress` or `connected`)
          /// 
          /// In addition to the general error codes documented on the
          /// `network::error-code` type, TCP socket methods may always return
          /// `error(invalid-state)` when in the `closed` state.
          
          #[derive(Debug)]
          #[repr(transparent)]
          pub struct TcpSocket{
            handle: wit_bindgen::rt::Resource<TcpSocket>,
          }
          
          impl TcpSocket{
            #[doc(hidden)]
            pub unsafe fn from_handle(handle: u32) -> Self {
              Self {
                handle: wit_bindgen::rt::Resource::from_handle(handle),
              }
            }
            
            #[doc(hidden)]
            pub fn into_handle(self) -> u32 {
              wit_bindgen::rt::Resource::into_handle(self.handle)
            }
            
            #[doc(hidden)]
            pub fn handle(&self) -> u32 {
              wit_bindgen::rt::Resource::handle(&self.handle)
            }
          }
          
          
          unsafe impl wit_bindgen::rt::WasmResource for TcpSocket{
            #[inline]
            unsafe fn drop(_handle: u32) {
              #[cfg(not(target_arch = "wasm32"))]
              unreachable!();
              
              #[cfg(target_arch = "wasm32")]
              {
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[resource-drop]tcp-socket"]
                  fn drop(_: u32);
                }
                
                drop(_handle);
              }
            }
          }
          
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Bind the socket to a specific network on the provided IP address and port.
            /// 
            /// If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which
            /// network interface(s) to bind to.
            /// If the TCP/UDP port is zero, the socket will be bound to a random free port.
            /// 
            /// Bind can be attempted multiple times on the same socket, even with
            /// different arguments on each iteration. But never concurrently and
            /// only as long as the previous bind failed. Once a bind succeeds, the
            /// binding can't be changed anymore.
            /// 
            /// # Typical errors
            /// - `invalid-argument`:          The `local-address` has the wrong address family. (EAFNOSUPPORT, EFAULT on Windows)
            /// - `invalid-argument`:          `local-address` is not a unicast address. (EINVAL)
            /// - `invalid-argument`:          `local-address` is an IPv4-mapped IPv6 address. (EINVAL)
            /// - `invalid-state`:             The socket is already bound. (EINVAL)
            /// - `address-in-use`:            No ephemeral ports available. (EADDRINUSE, ENOBUFS on Windows)
            /// - `address-in-use`:            Address is already in use. (EADDRINUSE)
            /// - `address-not-bindable`:      `local-address` is not an address that the `network` can bind to. (EADDRNOTAVAIL)
            /// - `not-in-progress`:           A `bind` operation is not in progress.
            /// - `would-block`:               Can't finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)
            /// 
            /// # Implementors note
            /// When binding to a non-zero port, this bind operation shouldn't be affected by the TIME_WAIT
            /// state of a recently closed socket on the same local address. In practice this means that the SO_REUSEADDR
            /// socket option should be set implicitly on all platforms, except on Windows where this is the default behavior
            /// and SO_REUSEADDR performs something different entirely.
            /// 
            /// Unlike in POSIX, in WASI the bind operation is async. This enables
            /// interactive WASI hosts to inject permission prompts. Runtimes that
            /// don't want to make use of this ability can simply call the native
            /// `bind` as part of either `start-bind` or `finish-bind`.
            /// 
            /// # References
            /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html>
            /// - <https://man7.org/linux/man-pages/man2/bind.2.html>
            /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-bind>
            /// - <https://man.freebsd.org/cgi/man.cgi?query=bind&sektion=2&format=html>
            pub fn start_bind(&self,network: &Network,local_address: IpSocketAddress,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                use super::super::super::wasi::sockets::network::IpSocketAddress as V4;
                let (result5_0,result5_1,result5_2,result5_3,result5_4,result5_5,result5_6,result5_7,result5_8,result5_9,result5_10,result5_11,) = match local_address {
                  V4::Ipv4(e) => {
                    let super::super::super::wasi::sockets::network::Ipv4SocketAddress{ port:port0, address:address0, } = e;
                    let (t1_0, t1_1, t1_2, t1_3, ) = address0;
                    
                    (0i32, wit_bindgen::rt::as_i32(port0), wit_bindgen::rt::as_i32(t1_0), wit_bindgen::rt::as_i32(t1_1), wit_bindgen::rt::as_i32(t1_2), wit_bindgen::rt::as_i32(t1_3), 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
                  },
                  V4::Ipv6(e) => {
                    let super::super::super::wasi::sockets::network::Ipv6SocketAddress{ port:port2, flow_info:flow_info2, address:address2, scope_id:scope_id2, } = e;
                    let (t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, ) = address2;
                    
                    (1i32, wit_bindgen::rt::as_i32(port2), wit_bindgen::rt::as_i32(flow_info2), wit_bindgen::rt::as_i32(t3_0), wit_bindgen::rt::as_i32(t3_1), wit_bindgen::rt::as_i32(t3_2), wit_bindgen::rt::as_i32(t3_3), wit_bindgen::rt::as_i32(t3_4), wit_bindgen::rt::as_i32(t3_5), wit_bindgen::rt::as_i32(t3_6), wit_bindgen::rt::as_i32(t3_7), wit_bindgen::rt::as_i32(scope_id2))
                  },
                };
                let ptr6 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.start-bind"]
                  fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, (network).handle() as i32, result5_0, result5_1, result5_2, result5_3, result5_4, result5_5, result5_6, result5_7, result5_8, result5_9, result5_10, result5_11, ptr6);
                let l7 = i32::from(*((ptr6 + 0) as *const u8));
                match l7 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l8 = i32::from(*((ptr6 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l8 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            pub fn finish_bind(&self,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.finish-bind"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l2 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Connect to a remote endpoint.
            /// 
            /// On success:
            /// - the socket is transitioned into the `connection` state.
            /// - a pair of streams is returned that can be used to read & write to the connection
            /// 
            /// After a failed connection attempt, the socket will be in the `closed`
            /// state and the only valid action left is to `drop` the socket. A single
            /// socket can not be used to connect more than once.
            /// 
            /// # Typical errors
            /// - `invalid-argument`:          The `remote-address` has the wrong address family. (EAFNOSUPPORT)
            /// - `invalid-argument`:          `remote-address` is not a unicast address. (EINVAL, ENETUNREACH on Linux, EAFNOSUPPORT on MacOS)
            /// - `invalid-argument`:          `remote-address` is an IPv4-mapped IPv6 address. (EINVAL, EADDRNOTAVAIL on Illumos)
            /// - `invalid-argument`:          The IP address in `remote-address` is set to INADDR_ANY (`0.0.0.0` / `::`). (EADDRNOTAVAIL on Windows)
            /// - `invalid-argument`:          The port in `remote-address` is set to 0. (EADDRNOTAVAIL on Windows)
            /// - `invalid-argument`:          The socket is already attached to a different network. The `network` passed to `connect` must be identical to the one passed to `bind`.
            /// - `invalid-state`:             The socket is already in the `connected` state. (EISCONN)
            /// - `invalid-state`:             The socket is already in the `listening` state. (EOPNOTSUPP, EINVAL on Windows)
            /// - `timeout`:                   Connection timed out. (ETIMEDOUT)
            /// - `connection-refused`:        The connection was forcefully rejected. (ECONNREFUSED)
            /// - `connection-reset`:          The connection was reset. (ECONNRESET)
            /// - `connection-aborted`:        The connection was aborted. (ECONNABORTED)
            /// - `remote-unreachable`:        The remote address is not reachable. (EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN, ENONET)
            /// - `address-in-use`:            Tried to perform an implicit bind, but there were no ephemeral ports available. (EADDRINUSE, EADDRNOTAVAIL on Linux, EAGAIN on BSD)
            /// - `not-in-progress`:           A connect operation is not in progress.
            /// - `would-block`:               Can't finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)
            /// 
            /// # Implementors note
            /// The POSIX equivalent of `start-connect` is the regular `connect` syscall.
            /// Because all WASI sockets are non-blocking this is expected to return
            /// EINPROGRESS, which should be translated to `ok()` in WASI.
            /// 
            /// The POSIX equivalent of `finish-connect` is a `poll` for event `POLLOUT`
            /// with a timeout of 0 on the socket descriptor. Followed by a check for
            /// the `SO_ERROR` socket option, in case the poll signaled readiness.
            /// 
            /// # References
            /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html>
            /// - <https://man7.org/linux/man-pages/man2/connect.2.html>
            /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>
            /// - <https://man.freebsd.org/cgi/man.cgi?connect>
            pub fn start_connect(&self,network: &Network,remote_address: IpSocketAddress,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                use super::super::super::wasi::sockets::network::IpSocketAddress as V4;
                let (result5_0,result5_1,result5_2,result5_3,result5_4,result5_5,result5_6,result5_7,result5_8,result5_9,result5_10,result5_11,) = match remote_address {
                  V4::Ipv4(e) => {
                    let super::super::super::wasi::sockets::network::Ipv4SocketAddress{ port:port0, address:address0, } = e;
                    let (t1_0, t1_1, t1_2, t1_3, ) = address0;
                    
                    (0i32, wit_bindgen::rt::as_i32(port0), wit_bindgen::rt::as_i32(t1_0), wit_bindgen::rt::as_i32(t1_1), wit_bindgen::rt::as_i32(t1_2), wit_bindgen::rt::as_i32(t1_3), 0i32, 0i32, 0i32, 0i32, 0i32, 0i32)
                  },
                  V4::Ipv6(e) => {
                    let super::super::super::wasi::sockets::network::Ipv6SocketAddress{ port:port2, flow_info:flow_info2, address:address2, scope_id:scope_id2, } = e;
                    let (t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7, ) = address2;
                    
                    (1i32, wit_bindgen::rt::as_i32(port2), wit_bindgen::rt::as_i32(flow_info2), wit_bindgen::rt::as_i32(t3_0), wit_bindgen::rt::as_i32(t3_1), wit_bindgen::rt::as_i32(t3_2), wit_bindgen::rt::as_i32(t3_3), wit_bindgen::rt::as_i32(t3_4), wit_bindgen::rt::as_i32(t3_5), wit_bindgen::rt::as_i32(t3_6), wit_bindgen::rt::as_i32(t3_7), wit_bindgen::rt::as_i32(scope_id2))
                  },
                };
                let ptr6 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.start-connect"]
                  fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, (network).handle() as i32, result5_0, result5_1, result5_2, result5_3, result5_4, result5_5, result5_6, result5_7, result5_8, result5_9, result5_10, result5_11, ptr6);
                let l7 = i32::from(*((ptr6 + 0) as *const u8));
                match l7 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l8 = i32::from(*((ptr6 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l8 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            pub fn finish_connect(&self,) -> Result<(InputStream,OutputStream,),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(4))]
                struct RetArea([u8; 12]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.finish-connect"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = *((ptr0 + 4) as *const i32);
                      let l3 = *((ptr0 + 8) as *const i32);
                      
                      (super::super::super::wasi::io::streams::InputStream::from_handle(l2 as u32), super::super::super::wasi::io::streams::OutputStream::from_handle(l3 as u32))
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l4 = i32::from(*((ptr0 + 4) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l4 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Start listening for new connections.
            /// 
            /// Transitions the socket into the `listening` state.
            /// 
            /// Unlike POSIX, the socket must already be explicitly bound.
            /// 
            /// # Typical errors
            /// - `invalid-state`:             The socket is not bound to any local address. (EDESTADDRREQ)
            /// - `invalid-state`:             The socket is already in the `connected` state. (EISCONN, EINVAL on BSD)
            /// - `invalid-state`:             The socket is already in the `listening` state.
            /// - `address-in-use`:            Tried to perform an implicit bind, but there were no ephemeral ports available. (EADDRINUSE)
            /// - `not-in-progress`:           A listen operation is not in progress.
            /// - `would-block`:               Can't finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)
            /// 
            /// # Implementors note
            /// Unlike in POSIX, in WASI the listen operation is async. This enables
            /// interactive WASI hosts to inject permission prompts. Runtimes that
            /// don't want to make use of this ability can simply call the native
            /// `listen` as part of either `start-listen` or `finish-listen`.
            /// 
            /// # References
            /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/listen.html>
            /// - <https://man7.org/linux/man-pages/man2/listen.2.html>
            /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-listen>
            /// - <https://man.freebsd.org/cgi/man.cgi?query=listen&sektion=2>
            pub fn start_listen(&self,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.start-listen"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l2 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            pub fn finish_listen(&self,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.finish-listen"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l2 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Accept a new client socket.
            /// 
            /// The returned socket is bound and in the `connected` state. The following properties are inherited from the listener socket:
            /// - `address-family`
            /// - `keep-alive-enabled`
            /// - `keep-alive-idle-time`
            /// - `keep-alive-interval`
            /// - `keep-alive-count`
            /// - `hop-limit`
            /// - `receive-buffer-size`
            /// - `send-buffer-size`
            /// 
            /// On success, this function returns the newly accepted client socket along with
            /// a pair of streams that can be used to read & write to the connection.
            /// 
            /// # Typical errors
            /// - `invalid-state`:      Socket is not in the `listening` state. (EINVAL)
            /// - `would-block`:        No pending connections at the moment. (EWOULDBLOCK, EAGAIN)
            /// - `connection-aborted`: An incoming connection was pending, but was terminated by the client before this listener could accept it. (ECONNABORTED)
            /// - `new-socket-limit`:   The new socket resource could not be created because of a system limit. (EMFILE, ENFILE)
            /// 
            /// # References
            /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/accept.html>
            /// - <https://man7.org/linux/man-pages/man2/accept.2.html>
            /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-accept>
            /// - <https://man.freebsd.org/cgi/man.cgi?query=accept&sektion=2>
            pub fn accept(&self,) -> Result<(TcpSocket,InputStream,OutputStream,),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(4))]
                struct RetArea([u8; 16]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.accept"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = *((ptr0 + 4) as *const i32);
                      let l3 = *((ptr0 + 8) as *const i32);
                      let l4 = *((ptr0 + 12) as *const i32);
                      
                      (TcpSocket::from_handle(l2 as u32), super::super::super::wasi::io::streams::InputStream::from_handle(l3 as u32), super::super::super::wasi::io::streams::OutputStream::from_handle(l4 as u32))
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l5 = i32::from(*((ptr0 + 4) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l5 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Get the bound local address.
            /// 
            /// POSIX mentions:
            /// > If the socket has not been bound to a local name, the value
            /// > stored in the object pointed to by `address` is unspecified.
            /// 
            /// WASI is stricter and requires `local-address` to return `invalid-state` when the socket hasn't been bound yet.
            /// 
            /// # Typical errors
            /// - `invalid-state`: The socket is not bound to any local address.
            /// 
            /// # References
            /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html>
            /// - <https://man7.org/linux/man-pages/man2/getsockname.2.html>
            /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getsockname>
            /// - <https://man.freebsd.org/cgi/man.cgi?getsockname>
            pub fn local_address(&self,) -> Result<IpSocketAddress,ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(4))]
                struct RetArea([u8; 36]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.local-address"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 4) as *const u8));
                      use super::super::super::wasi::sockets::network::IpSocketAddress as V19;
                      let v19 = match l2 {
                        0 => {
                          let e19 = {
                            let l3 = i32::from(*((ptr0 + 8) as *const u16));
                            let l4 = i32::from(*((ptr0 + 10) as *const u8));
                            let l5 = i32::from(*((ptr0 + 11) as *const u8));
                            let l6 = i32::from(*((ptr0 + 12) as *const u8));
                            let l7 = i32::from(*((ptr0 + 13) as *const u8));
                            
                            super::super::super::wasi::sockets::network::Ipv4SocketAddress{
                              port: l3 as u16,
                              address: (l4 as u8, l5 as u8, l6 as u8, l7 as u8),
                            }
                          };
                          V19::Ipv4(e19)
                        }
                        n => {
                          debug_assert_eq!(n, 1, "invalid enum discriminant");
                          let e19 = {
                            let l8 = i32::from(*((ptr0 + 8) as *const u16));
                            let l9 = *((ptr0 + 12) as *const i32);
                            let l10 = i32::from(*((ptr0 + 16) as *const u16));
                            let l11 = i32::from(*((ptr0 + 18) as *const u16));
                            let l12 = i32::from(*((ptr0 + 20) as *const u16));
                            let l13 = i32::from(*((ptr0 + 22) as *const u16));
                            let l14 = i32::from(*((ptr0 + 24) as *const u16));
                            let l15 = i32::from(*((ptr0 + 26) as *const u16));
                            let l16 = i32::from(*((ptr0 + 28) as *const u16));
                            let l17 = i32::from(*((ptr0 + 30) as *const u16));
                            let l18 = *((ptr0 + 32) as *const i32);
                            
                            super::super::super::wasi::sockets::network::Ipv6SocketAddress{
                              port: l8 as u16,
                              flow_info: l9 as u32,
                              address: (l10 as u16, l11 as u16, l12 as u16, l13 as u16, l14 as u16, l15 as u16, l16 as u16, l17 as u16),
                              scope_id: l18 as u32,
                            }
                          };
                          V19::Ipv6(e19)
                        }
                      };
                      
                      v19
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l20 = i32::from(*((ptr0 + 4) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l20 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Get the remote address.
            /// 
            /// # Typical errors
            /// - `invalid-state`: The socket is not connected to a remote address. (ENOTCONN)
            /// 
            /// # References
            /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html>
            /// - <https://man7.org/linux/man-pages/man2/getpeername.2.html>
            /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getpeername>
            /// - <https://man.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2&n=1>
            pub fn remote_address(&self,) -> Result<IpSocketAddress,ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(4))]
                struct RetArea([u8; 36]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.remote-address"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 4) as *const u8));
                      use super::super::super::wasi::sockets::network::IpSocketAddress as V19;
                      let v19 = match l2 {
                        0 => {
                          let e19 = {
                            let l3 = i32::from(*((ptr0 + 8) as *const u16));
                            let l4 = i32::from(*((ptr0 + 10) as *const u8));
                            let l5 = i32::from(*((ptr0 + 11) as *const u8));
                            let l6 = i32::from(*((ptr0 + 12) as *const u8));
                            let l7 = i32::from(*((ptr0 + 13) as *const u8));
                            
                            super::super::super::wasi::sockets::network::Ipv4SocketAddress{
                              port: l3 as u16,
                              address: (l4 as u8, l5 as u8, l6 as u8, l7 as u8),
                            }
                          };
                          V19::Ipv4(e19)
                        }
                        n => {
                          debug_assert_eq!(n, 1, "invalid enum discriminant");
                          let e19 = {
                            let l8 = i32::from(*((ptr0 + 8) as *const u16));
                            let l9 = *((ptr0 + 12) as *const i32);
                            let l10 = i32::from(*((ptr0 + 16) as *const u16));
                            let l11 = i32::from(*((ptr0 + 18) as *const u16));
                            let l12 = i32::from(*((ptr0 + 20) as *const u16));
                            let l13 = i32::from(*((ptr0 + 22) as *const u16));
                            let l14 = i32::from(*((ptr0 + 24) as *const u16));
                            let l15 = i32::from(*((ptr0 + 26) as *const u16));
                            let l16 = i32::from(*((ptr0 + 28) as *const u16));
                            let l17 = i32::from(*((ptr0 + 30) as *const u16));
                            let l18 = *((ptr0 + 32) as *const i32);
                            
                            super::super::super::wasi::sockets::network::Ipv6SocketAddress{
                              port: l8 as u16,
                              flow_info: l9 as u32,
                              address: (l10 as u16, l11 as u16, l12 as u16, l13 as u16, l14 as u16, l15 as u16, l16 as u16, l17 as u16),
                              scope_id: l18 as u32,
                            }
                          };
                          V19::Ipv6(e19)
                        }
                      };
                      
                      v19
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l20 = i32::from(*((ptr0 + 4) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l20 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Whether the socket is in the `listening` state.
            /// 
            /// Equivalent to the SO_ACCEPTCONN socket option.
            pub fn is_listening(&self,) -> bool{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.is-listening"]
                  fn wit_import(_: i32, ) -> i32;
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, ) -> i32{ unreachable!() }
                let ret = wit_import((self).handle() as i32);
                wit_bindgen::rt::bool_lift(ret as u8)
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Whether this is a IPv4 or IPv6 socket.
            /// 
            /// Equivalent to the SO_DOMAIN socket option.
            pub fn address_family(&self,) -> IpAddressFamily{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.address-family"]
                  fn wit_import(_: i32, ) -> i32;
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, ) -> i32{ unreachable!() }
                let ret = wit_import((self).handle() as i32);
                super::super::super::wasi::sockets::network::IpAddressFamily::_lift(ret as u8)
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Hints the desired listen queue size. Implementations are free to ignore this.
            /// 
            /// If the provided value is 0, an `invalid-argument` error is returned.
            /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
            /// 
            /// # Typical errors
            /// - `not-supported`:        (set) The platform does not support changing the backlog size after the initial listen.
            /// - `invalid-argument`:     (set) The provided value was 0.
            /// - `invalid-state`:        (set) The socket is in the `connect-in-progress` or `connected` state.
            pub fn set_listen_backlog_size(&self,value: u64,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.set-listen-backlog-size"]
                  fn wit_import(_: i32, _: i64, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(value), ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l2 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Enables or disables keepalive.
            /// 
            /// The keepalive behavior can be adjusted using:
            /// - `keep-alive-idle-time`
            /// - `keep-alive-interval`
            /// - `keep-alive-count`
            /// These properties can be configured while `keep-alive-enabled` is false, but only come into effect when `keep-alive-enabled` is true.
            /// 
            /// Equivalent to the SO_KEEPALIVE socket option.
            pub fn keep_alive_enabled(&self,) -> Result<bool,ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.keep-alive-enabled"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      wit_bindgen::rt::bool_lift(l2 as u8)
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l3 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l3 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            pub fn set_keep_alive_enabled(&self,value: bool,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.set-keep-alive-enabled"]
                  fn wit_import(_: i32, _: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, match value { true => 1, false => 0 }, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l2 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Amount of time the connection has to be idle before TCP starts sending keepalive packets.
            /// 
            /// If the provided value is 0, an `invalid-argument` error is returned.
            /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
            /// I.e. after setting a value, reading the same setting back may return a different value.
            /// 
            /// Equivalent to the TCP_KEEPIDLE socket option. (TCP_KEEPALIVE on MacOS)
            /// 
            /// # Typical errors
            /// - `invalid-argument`:     (set) The provided value was 0.
            pub fn keep_alive_idle_time(&self,) -> Result<Duration,ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(8))]
                struct RetArea([u8; 16]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.keep-alive-idle-time"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = *((ptr0 + 8) as *const i64);
                      
                      l2 as u64
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l3 = i32::from(*((ptr0 + 8) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l3 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            pub fn set_keep_alive_idle_time(&self,value: Duration,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.set-keep-alive-idle-time"]
                  fn wit_import(_: i32, _: i64, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(value), ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l2 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// The time between keepalive packets.
            /// 
            /// If the provided value is 0, an `invalid-argument` error is returned.
            /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
            /// I.e. after setting a value, reading the same setting back may return a different value.
            /// 
            /// Equivalent to the TCP_KEEPINTVL socket option.
            /// 
            /// # Typical errors
            /// - `invalid-argument`:     (set) The provided value was 0.
            pub fn keep_alive_interval(&self,) -> Result<Duration,ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(8))]
                struct RetArea([u8; 16]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.keep-alive-interval"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = *((ptr0 + 8) as *const i64);
                      
                      l2 as u64
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l3 = i32::from(*((ptr0 + 8) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l3 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            pub fn set_keep_alive_interval(&self,value: Duration,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.set-keep-alive-interval"]
                  fn wit_import(_: i32, _: i64, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(value), ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l2 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// The maximum amount of keepalive packets TCP should send before aborting the connection.
            /// 
            /// If the provided value is 0, an `invalid-argument` error is returned.
            /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
            /// I.e. after setting a value, reading the same setting back may return a different value.
            /// 
            /// Equivalent to the TCP_KEEPCNT socket option.
            /// 
            /// # Typical errors
            /// - `invalid-argument`:     (set) The provided value was 0.
            pub fn keep_alive_count(&self,) -> Result<u32,ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(4))]
                struct RetArea([u8; 8]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.keep-alive-count"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = *((ptr0 + 4) as *const i32);
                      
                      l2 as u32
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l3 = i32::from(*((ptr0 + 4) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l3 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            pub fn set_keep_alive_count(&self,value: u32,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.set-keep-alive-count"]
                  fn wit_import(_: i32, _: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(value), ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l2 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Equivalent to the IP_TTL & IPV6_UNICAST_HOPS socket options.
            /// 
            /// If the provided value is 0, an `invalid-argument` error is returned.
            /// 
            /// # Typical errors
            /// - `invalid-argument`:     (set) The TTL value must be 1 or higher.
            pub fn hop_limit(&self,) -> Result<u8,ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.hop-limit"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      l2 as u8
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l3 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l3 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            pub fn set_hop_limit(&self,value: u8,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.set-hop-limit"]
                  fn wit_import(_: i32, _: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, wit_bindgen::rt::as_i32(value), ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l2 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// The kernel buffer space reserved for sends/receives on this socket.
            /// 
            /// If the provided value is 0, an `invalid-argument` error is returned.
            /// Any other value will never cause an error, but it might be silently clamped and/or rounded.
            /// I.e. after setting a value, reading the same setting back may return a different value.
            /// 
            /// Equivalent to the SO_RCVBUF and SO_SNDBUF socket options.
            /// 
            /// # Typical errors
            /// - `invalid-argument`:     (set) The provided value was 0.
            pub fn receive_buffer_size(&self,) -> Result<u64,ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(8))]
                struct RetArea([u8; 16]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.receive-buffer-size"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = *((ptr0 + 8) as *const i64);
                      
                      l2 as u64
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l3 = i32::from(*((ptr0 + 8) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l3 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            pub fn set_receive_buffer_size(&self,value: u64,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.set-receive-buffer-size"]
                  fn wit_import(_: i32, _: i64, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(value), ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l2 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            pub fn send_buffer_size(&self,) -> Result<u64,ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(8))]
                struct RetArea([u8; 16]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.send-buffer-size"]
                  fn wit_import(_: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = {
                      let l2 = *((ptr0 + 8) as *const i64);
                      
                      l2 as u64
                    };
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l3 = i32::from(*((ptr0 + 8) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l3 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            pub fn set_send_buffer_size(&self,value: u64,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.set-send-buffer-size"]
                  fn wit_import(_: i32, _: i64, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i64, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, wit_bindgen::rt::as_i64(value), ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l2 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which can be used to poll for, or block on,
            /// completion of any of the asynchronous operations of this socket.
            /// 
            /// When `finish-bind`, `finish-listen`, `finish-connect` or `accept`
            /// return `error(would-block)`, this pollable can be used to wait for
            /// their success or failure, after which the method can be retried.
            /// 
            /// The pollable is not limited to the async operation that happens to be
            /// in progress at the time of calling `subscribe` (if any). Theoretically,
            /// `subscribe` only has to be called once per socket and can then be
            /// (re)used for the remainder of the socket's lifetime.
            /// 
            /// See <https://github.com/WebAssembly/wasi-sockets/TcpSocketOperationalSemantics.md#Pollable-readiness>
            /// for a more information.
            /// 
            /// Note: this function is here for WASI Preview2 only.
            /// It's planned to be removed when `future` is natively supported in Preview3.
            pub fn subscribe(&self,) -> Pollable{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.subscribe"]
                  fn wit_import(_: i32, ) -> i32;
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, ) -> i32{ unreachable!() }
                let ret = wit_import((self).handle() as i32);
                super::super::super::wasi::io::poll::Pollable::from_handle(ret as u32)
              }
            }
          }
          impl TcpSocket {
            #[allow(unused_unsafe, clippy::all)]
            /// Initiate a graceful shutdown.
            /// 
            /// - `receive`: The socket is not expecting to receive any data from
            /// the peer. The `input-stream` associated with this socket will be
            /// closed. Any data still in the receive queue at time of calling
            /// this method will be discarded.
            /// - `send`: The socket has no more data to send to the peer. The `output-stream`
            /// associated with this socket will be closed and a FIN packet will be sent.
            /// - `both`: Same effect as `receive` & `send` combined.
            /// 
            /// This function is idempotent. Shutting a down a direction more than once
            /// has no effect and returns `ok`.
            /// 
            /// The shutdown function does not close (drop) the socket.
            /// 
            /// # Typical errors
            /// - `invalid-state`: The socket is not in the `connected` state. (ENOTCONN)
            /// 
            /// # References
            /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/shutdown.html>
            /// - <https://man7.org/linux/man-pages/man2/shutdown.2.html>
            /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-shutdown>
            /// - <https://man.freebsd.org/cgi/man.cgi?query=shutdown&sektion=2>
            pub fn shutdown(&self,shutdown_type: ShutdownType,) -> Result<(),ErrorCode>{
              
              #[allow(unused_imports)]
              use wit_bindgen::rt::{alloc, vec::Vec, string::String};
              unsafe {
                
                #[repr(align(1))]
                struct RetArea([u8; 2]);
                let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
                let ptr0 = ret_area.as_mut_ptr() as i32;
                #[cfg(target_arch = "wasm32")]
                #[link(wasm_import_module = "wasi:sockets/tcp@0.2.0")]
                extern "C" {
                  #[link_name = "[method]tcp-socket.shutdown"]
                  fn wit_import(_: i32, _: i32, _: i32, );
                }
                
                #[cfg(not(target_arch = "wasm32"))]
                fn wit_import(_: i32, _: i32, _: i32, ){ unreachable!() }
                wit_import((self).handle() as i32, shutdown_type.clone() as i32, ptr0);
                let l1 = i32::from(*((ptr0 + 0) as *const u8));
                match l1 {
                  0 => {
                    let e = ();
                    Ok(e)
                  }
                  1 => {
                    let e = {
                      let l2 = i32::from(*((ptr0 + 1) as *const u8));
                      
                      super::super::super::wasi::sockets::network::ErrorCode::_lift(l2 as u8)
                    };
                    Err(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }
              }
            }
          }
          
        }
        
        
        #[allow(clippy::all)]
        pub mod tcp_create_socket {
          #[used]
          #[doc(hidden)]
          #[cfg(target_arch = "wasm32")]
          static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
          pub type ErrorCode = super::super::super::wasi::sockets::network::ErrorCode;
          pub type IpAddressFamily = super::super::super::wasi::sockets::network::IpAddressFamily;
          pub type TcpSocket = super::super::super::wasi::sockets::tcp::TcpSocket;
          #[allow(unused_unsafe, clippy::all)]
          /// Create a new TCP socket.
          /// 
          /// Similar to `socket(AF_INET or AF_INET6, SOCK_STREAM, IPPROTO_TCP)` in POSIX.
          /// On IPv6 sockets, IPV6_V6ONLY is enabled by default and can't be configured otherwise.
          /// 
          /// This function does not require a network capability handle. This is considered to be safe because
          /// at time of creation, the socket is not bound to any `network` yet. Up to the moment `bind`/`connect`
          /// is called, the socket is effectively an in-memory configuration object, unable to communicate with the outside world.
          /// 
          /// All sockets are non-blocking. Use the wasi-poll interface to block on asynchronous operations.
          /// 
          /// # Typical errors
          /// - `not-supported`:     The specified `address-family` is not supported. (EAFNOSUPPORT)
          /// - `new-socket-limit`:  The new socket resource could not be created because of a system limit. (EMFILE, ENFILE)
          /// 
          /// # References
          /// - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/socket.html>
          /// - <https://man7.org/linux/man-pages/man2/socket.2.html>
          /// - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasocketw>
          /// - <https://man.freebsd.org/cgi/man.cgi?query=socket&sektion=2>
          pub fn create_tcp_socket(address_family: IpAddressFamily,) -> Result<TcpSocket,ErrorCode>{
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            unsafe {
              
              #[repr(align(4))]
              struct RetArea([u8; 8]);
              let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
              let ptr0 = ret_area.as_mut_ptr() as i32;
              #[cfg(target_arch = "wasm32")]
              #[link(wasm_import_module = "wasi:sockets/tcp-create-socket@0.2.0")]
              extern "C" {
                #[link_name = "create-tcp-socket"]
                fn wit_import(_: i32, _: i32, );
              }
              
              #[cfg(not(target_arch = "wasm32"))]
              fn wit_import(_: i32, _: i32, ){ unreachable!() }
              wit_import(address_family.clone() as i32, ptr0);
              let l1 = i32::from(*((ptr0 + 0) as *const u8));
              match l1 {
                0 => {
                  let e = {
                    let l2 = *((ptr0 + 4) as *const i32);
                    
                    super::super::super::wasi::sockets::tcp::TcpSocket::from_handle(l2 as u32)
                  };
                  Ok(e)
                }
                1 => {
                  let e = {
                    let l3 = i32::from(*((ptr0 + 4) as *const u8));
                    
                    super::super::super::wasi::sockets::network::ErrorCode::_lift(l3 as u8)
                  };
                  Err(e)
                }
                _ => wit_bindgen::rt::invalid_enum_discriminant(),
              }
            }
          }
          
        }
        
      }
    }
    pub mod exports {
      pub mod component {
        pub mod nfs_rs {
          
          #[allow(clippy::all)]
          pub mod nfs {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Time {
              pub seconds: u32,
              pub nseconds: u32,
            }
            impl ::core::fmt::Debug for Time {
              fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                f.debug_struct("Time").field("seconds", &self.seconds).field("nseconds", &self.nseconds).finish()
              }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Attr {
              pub attr_type: u32,
              pub file_mode: u32,
              pub nlink: u32,
              pub uid: u32,
              pub gid: u32,
              pub filesize: u64,
              pub used: u64,
              pub spec_data: (u32,u32,),
              pub fsid: u64,
              pub fileid: u64,
              pub atime: Time,
              pub mtime: Time,
              pub ctime: Time,
            }
            impl ::core::fmt::Debug for Attr {
              fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                f.debug_struct("Attr").field("attr-type", &self.attr_type).field("file-mode", &self.file_mode).field("nlink", &self.nlink).field("uid", &self.uid).field("gid", &self.gid).field("filesize", &self.filesize).field("used", &self.used).field("spec-data", &self.spec_data).field("fsid", &self.fsid).field("fileid", &self.fileid).field("atime", &self.atime).field("mtime", &self.mtime).field("ctime", &self.ctime).finish()
              }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct PathConf {
              pub attr: Option<Attr>,
              pub linkmax: u32,
              pub name_max: u32,
              pub no_trunc: bool,
              pub chown_restricted: bool,
              pub case_insensitive: bool,
              pub case_preserving: bool,
            }
            impl ::core::fmt::Debug for PathConf {
              fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                f.debug_struct("PathConf").field("attr", &self.attr).field("linkmax", &self.linkmax).field("name-max", &self.name_max).field("no-trunc", &self.no_trunc).field("chown-restricted", &self.chown_restricted).field("case-insensitive", &self.case_insensitive).field("case-preserving", &self.case_preserving).finish()
              }
            }
            #[derive(Clone)]
            pub struct ReaddirEntry {
              pub fileid: u64,
              pub file_name: wit_bindgen::rt::string::String,
              pub cookie: u64,
            }
            impl ::core::fmt::Debug for ReaddirEntry {
              fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                f.debug_struct("ReaddirEntry").field("fileid", &self.fileid).field("file-name", &self.file_name).field("cookie", &self.cookie).finish()
              }
            }
            #[derive(Clone)]
            pub struct ReaddirplusEntry {
              pub fileid: u64,
              pub file_name: wit_bindgen::rt::string::String,
              pub cookie: u64,
              pub attr: Option<Attr>,
              pub handle: wit_bindgen::rt::vec::Vec::<u8>,
            }
            impl ::core::fmt::Debug for ReaddirplusEntry {
              fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                f.debug_struct("ReaddirplusEntry").field("fileid", &self.fileid).field("file-name", &self.file_name).field("cookie", &self.cookie).field("attr", &self.attr).field("handle", &self.handle).finish()
              }
            }
            #[derive(Clone)]
            pub struct Error {
              pub nfs_error_code: Option<i32>,
              pub message: wit_bindgen::rt::string::String,
            }
            impl ::core::fmt::Debug for Error {
              fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                f.debug_struct("Error").field("nfs-error-code", &self.nfs_error_code).field("message", &self.message).finish()
              }
            }
            impl ::core::fmt::Display for Error {
              fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                write!(f, "{:?}", self)
              }
            }
            impl std::error::Error for Error{}
            
            pub use super::super::super::super::super::NfsMount as NfsMount;
            const _: () = {
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[dtor]nfs-mount"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn dtor(rep: usize) {
                wit_bindgen::rt::Resource::<NfsMount>::dtor(rep)
              }
            };
            unsafe impl wit_bindgen::rt::RustResource for NfsMount{
              unsafe fn new(_rep: usize) -> u32 {
                #[cfg(not(target_arch = "wasm32"))]
                unreachable!();
                
                #[cfg(target_arch = "wasm32")]
                {
                  #[link(wasm_import_module = "[export]component:nfs-rs/nfs")]
                  extern "C" {
                    #[link_name = "[resource-new]nfs-mount"]
                    fn new(_: usize) -> u32;
                  }
                  new(_rep)
                }
              }
              
              unsafe fn rep(_handle: u32) -> usize {
                #[cfg(not(target_arch = "wasm32"))]
                unreachable!();
                
                #[cfg(target_arch = "wasm32")]
                {
                  #[link(wasm_import_module = "[export]component:nfs-rs/nfs")]
                  extern "C" {
                    #[link_name = "[resource-rep]nfs-mount"]
                    fn rep(_: u32) -> usize;
                  }
                  rep(_handle)
                }
              }
            }
            pub type OwnNfsMount = wit_bindgen::rt::Resource<NfsMount>;
            
            
            unsafe impl wit_bindgen::rt::WasmResource for NfsMount{
              #[inline]
              unsafe fn drop(_handle: u32) {
                #[cfg(not(target_arch = "wasm32"))]
                unreachable!();
                
                #[cfg(target_arch = "wasm32")]
                {
                  #[link(wasm_import_module = "[export]component:nfs-rs/nfs")]
                  extern "C" {
                    #[link_name = "[resource-drop]nfs-mount"]
                    fn drop(_: u32);
                  }
                  
                  drop(_handle);
                }
              }
            }
            
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#parse-url-and-mount"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_parse_url_and_mount(arg0: i32,arg1: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg1 as usize;
                let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
                let result1 = <_GuestImpl as Guest>::parse_url_and_mount(wit_bindgen::rt::string_lift(bytes0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    *((ptr2 + 4) as *mut i32) = wit_bindgen::rt::Resource::into_handle(e) as i32;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code3, message:message3, } = e;
                    match nfs_error_code3 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec4 = (message3.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((ptr2 + 16) as *mut i32) = len4;
                    *((ptr2 + 12) as *mut i32) = ptr4;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#parse-url-and-mount"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_parse_url_and_mount(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.null-op"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_null_op(arg0: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let result0 = <_NfsMountImpl as GuestNfsMount>::null_op(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize));
                let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                match result0 {
                  Ok(_) => { {
                    *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code2, message:message2, } = e;
                    match nfs_error_code2 {
                      Some(e) => {
                        *((ptr1 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr1 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec3 = (message2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr1 + 16) as *mut i32) = len3;
                    *((ptr1 + 12) as *mut i32) = ptr3;
                  } },
                };ptr1
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.null-op"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_null_op(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.access"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_access(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let result1 = <_NfsMountImpl as GuestNfsMount>::access(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0), arg3 as u32);
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    *((ptr2 + 4) as *mut i32) = wit_bindgen::rt::as_i32(e);
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code3, message:message3, } = e;
                    match nfs_error_code3 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec4 = (message3.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((ptr2 + 16) as *mut i32) = len4;
                    *((ptr2 + 12) as *mut i32) = ptr4;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.access"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_access(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.access-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_access_path(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::access_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), arg3 as u32);
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    *((ptr2 + 4) as *mut i32) = wit_bindgen::rt::as_i32(e);
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code3, message:message3, } = e;
                    match nfs_error_code3 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec4 = (message3.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((ptr2 + 16) as *mut i32) = len4;
                    *((ptr2 + 12) as *mut i32) = ptr4;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.access-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_access_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.close"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_close(arg0: i32,arg1: i32,arg2: i64,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let result0 = <_NfsMountImpl as GuestNfsMount>::close(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), arg1 as u32, arg2 as u64);
                let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                match result0 {
                  Ok(_) => { {
                    *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code2, message:message2, } = e;
                    match nfs_error_code2 {
                      Some(e) => {
                        *((ptr1 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr1 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec3 = (message2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr1 + 16) as *mut i32) = len3;
                    *((ptr1 + 12) as *mut i32) = ptr3;
                  } },
                };ptr1
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.close"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_close(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.commit"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_commit(arg0: i32,arg1: i32,arg2: i32,arg3: i64,arg4: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let result1 = <_NfsMountImpl as GuestNfsMount>::commit(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0), arg3 as u64, arg4 as u32);
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(_) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code3, message:message3, } = e;
                    match nfs_error_code3 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec4 = (message3.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((ptr2 + 16) as *mut i32) = len4;
                    *((ptr2 + 12) as *mut i32) = ptr4;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.commit"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_commit(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.commit-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_commit_path(arg0: i32,arg1: i32,arg2: i32,arg3: i64,arg4: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::commit_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), arg3 as u64, arg4 as u32);
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(_) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code3, message:message3, } = e;
                    match nfs_error_code3 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec4 = (message3.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((ptr2 + 16) as *mut i32) = len4;
                    *((ptr2 + 12) as *mut i32) = ptr4;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.commit-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_commit_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.create"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_create(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let len1 = arg4 as usize;
                let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                let result2 = <_NfsMountImpl as GuestNfsMount>::create(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0), wit_bindgen::rt::string_lift(bytes1), arg5 as u32);
                let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                match result2 {
                  Ok(e) => { {
                    *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                    let vec4 = (e).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((ptr3 + 8) as *mut i32) = len4;
                    *((ptr3 + 4) as *mut i32) = ptr4;
                  } },
                  Err(e) => { {
                    *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code5, message:message5, } = e;
                    match nfs_error_code5 {
                      Some(e) => {
                        *((ptr3 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr3 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr3 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec6 = (message5.into_bytes()).into_boxed_slice();
                    let ptr6 = vec6.as_ptr() as i32;
                    let len6 = vec6.len() as i32;
                    ::core::mem::forget(vec6);
                    *((ptr3 + 16) as *mut i32) = len6;
                    *((ptr3 + 12) as *mut i32) = ptr6;
                  } },
                };ptr3
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.create"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_create(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      let base3 = l1;
                      let len3 = l2;
                      wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                    },
                    _ => {
                      let l4 = *((arg0 + 12) as *const i32);
                      let l5 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.create-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_create_path(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::create_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), arg3 as u32);
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let vec3 = (e).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr2 + 8) as *mut i32) = len3;
                    *((ptr2 + 4) as *mut i32) = ptr3;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code4, message:message4, } = e;
                    match nfs_error_code4 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec5 = (message4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr2 + 16) as *mut i32) = len5;
                    *((ptr2 + 12) as *mut i32) = ptr5;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.create-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_create_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      let base3 = l1;
                      let len3 = l2;
                      wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                    },
                    _ => {
                      let l4 = *((arg0 + 12) as *const i32);
                      let l5 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.delegpurge"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_delegpurge(arg0: i32,arg1: i64,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let result0 = <_NfsMountImpl as GuestNfsMount>::delegpurge(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), arg1 as u64);
                let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                match result0 {
                  Ok(_) => { {
                    *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code2, message:message2, } = e;
                    match nfs_error_code2 {
                      Some(e) => {
                        *((ptr1 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr1 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec3 = (message2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr1 + 16) as *mut i32) = len3;
                    *((ptr1 + 12) as *mut i32) = ptr3;
                  } },
                };ptr1
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.delegpurge"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_delegpurge(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.delegreturn"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_delegreturn(arg0: i32,arg1: i64,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let result0 = <_NfsMountImpl as GuestNfsMount>::delegreturn(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), arg1 as u64);
                let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                match result0 {
                  Ok(_) => { {
                    *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code2, message:message2, } = e;
                    match nfs_error_code2 {
                      Some(e) => {
                        *((ptr1 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr1 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec3 = (message2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr1 + 16) as *mut i32) = len3;
                    *((ptr1 + 12) as *mut i32) = ptr3;
                  } },
                };ptr1
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.delegreturn"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_delegreturn(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.getattr"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_getattr(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let result1 = <_NfsMountImpl as GuestNfsMount>::getattr(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let Attr{ attr_type:attr_type3, file_mode:file_mode3, nlink:nlink3, uid:uid3, gid:gid3, filesize:filesize3, used:used3, spec_data:spec_data3, fsid:fsid3, fileid:fileid3, atime:atime3, mtime:mtime3, ctime:ctime3, } = e;
                    *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(attr_type3);
                    *((ptr2 + 12) as *mut i32) = wit_bindgen::rt::as_i32(file_mode3);
                    *((ptr2 + 16) as *mut i32) = wit_bindgen::rt::as_i32(nlink3);
                    *((ptr2 + 20) as *mut i32) = wit_bindgen::rt::as_i32(uid3);
                    *((ptr2 + 24) as *mut i32) = wit_bindgen::rt::as_i32(gid3);
                    *((ptr2 + 32) as *mut i64) = wit_bindgen::rt::as_i64(filesize3);
                    *((ptr2 + 40) as *mut i64) = wit_bindgen::rt::as_i64(used3);
                    let (t4_0, t4_1, ) = spec_data3;
                    *((ptr2 + 48) as *mut i32) = wit_bindgen::rt::as_i32(t4_0);
                    *((ptr2 + 52) as *mut i32) = wit_bindgen::rt::as_i32(t4_1);
                    *((ptr2 + 56) as *mut i64) = wit_bindgen::rt::as_i64(fsid3);
                    *((ptr2 + 64) as *mut i64) = wit_bindgen::rt::as_i64(fileid3);
                    let Time{ seconds:seconds5, nseconds:nseconds5, } = atime3;
                    *((ptr2 + 72) as *mut i32) = wit_bindgen::rt::as_i32(seconds5);
                    *((ptr2 + 76) as *mut i32) = wit_bindgen::rt::as_i32(nseconds5);
                    let Time{ seconds:seconds6, nseconds:nseconds6, } = mtime3;
                    *((ptr2 + 80) as *mut i32) = wit_bindgen::rt::as_i32(seconds6);
                    *((ptr2 + 84) as *mut i32) = wit_bindgen::rt::as_i32(nseconds6);
                    let Time{ seconds:seconds7, nseconds:nseconds7, } = ctime3;
                    *((ptr2 + 88) as *mut i32) = wit_bindgen::rt::as_i32(seconds7);
                    *((ptr2 + 92) as *mut i32) = wit_bindgen::rt::as_i32(nseconds7);
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code8, message:message8, } = e;
                    match nfs_error_code8 {
                      Some(e) => {
                        *((ptr2 + 8) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 8) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec9 = (message8.into_bytes()).into_boxed_slice();
                    let ptr9 = vec9.as_ptr() as i32;
                    let len9 = vec9.len() as i32;
                    ::core::mem::forget(vec9);
                    *((ptr2 + 20) as *mut i32) = len9;
                    *((ptr2 + 16) as *mut i32) = ptr9;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.getattr"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_getattr(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 16) as *const i32);
                      let l2 = *((arg0 + 20) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.getattr-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_getattr_path(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::getattr_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let Attr{ attr_type:attr_type3, file_mode:file_mode3, nlink:nlink3, uid:uid3, gid:gid3, filesize:filesize3, used:used3, spec_data:spec_data3, fsid:fsid3, fileid:fileid3, atime:atime3, mtime:mtime3, ctime:ctime3, } = e;
                    *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(attr_type3);
                    *((ptr2 + 12) as *mut i32) = wit_bindgen::rt::as_i32(file_mode3);
                    *((ptr2 + 16) as *mut i32) = wit_bindgen::rt::as_i32(nlink3);
                    *((ptr2 + 20) as *mut i32) = wit_bindgen::rt::as_i32(uid3);
                    *((ptr2 + 24) as *mut i32) = wit_bindgen::rt::as_i32(gid3);
                    *((ptr2 + 32) as *mut i64) = wit_bindgen::rt::as_i64(filesize3);
                    *((ptr2 + 40) as *mut i64) = wit_bindgen::rt::as_i64(used3);
                    let (t4_0, t4_1, ) = spec_data3;
                    *((ptr2 + 48) as *mut i32) = wit_bindgen::rt::as_i32(t4_0);
                    *((ptr2 + 52) as *mut i32) = wit_bindgen::rt::as_i32(t4_1);
                    *((ptr2 + 56) as *mut i64) = wit_bindgen::rt::as_i64(fsid3);
                    *((ptr2 + 64) as *mut i64) = wit_bindgen::rt::as_i64(fileid3);
                    let Time{ seconds:seconds5, nseconds:nseconds5, } = atime3;
                    *((ptr2 + 72) as *mut i32) = wit_bindgen::rt::as_i32(seconds5);
                    *((ptr2 + 76) as *mut i32) = wit_bindgen::rt::as_i32(nseconds5);
                    let Time{ seconds:seconds6, nseconds:nseconds6, } = mtime3;
                    *((ptr2 + 80) as *mut i32) = wit_bindgen::rt::as_i32(seconds6);
                    *((ptr2 + 84) as *mut i32) = wit_bindgen::rt::as_i32(nseconds6);
                    let Time{ seconds:seconds7, nseconds:nseconds7, } = ctime3;
                    *((ptr2 + 88) as *mut i32) = wit_bindgen::rt::as_i32(seconds7);
                    *((ptr2 + 92) as *mut i32) = wit_bindgen::rt::as_i32(nseconds7);
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code8, message:message8, } = e;
                    match nfs_error_code8 {
                      Some(e) => {
                        *((ptr2 + 8) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 8) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec9 = (message8.into_bytes()).into_boxed_slice();
                    let ptr9 = vec9.as_ptr() as i32;
                    let len9 = vec9.len() as i32;
                    ::core::mem::forget(vec9);
                    *((ptr2 + 20) as *mut i32) = len9;
                    *((ptr2 + 16) as *mut i32) = ptr9;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.getattr-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_getattr_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 16) as *const i32);
                      let l2 = *((arg0 + 20) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.setattr"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_setattr(arg0: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let l0 = *((arg0 + 0) as *const i32);
                let l1 = *((arg0 + 4) as *const i32);
                let l2 = *((arg0 + 8) as *const i32);
                let len3 = l2 as usize;
                let l4 = i32::from(*((arg0 + 12) as *const u8));
                let l7 = i32::from(*((arg0 + 24) as *const u8));
                let l9 = i32::from(*((arg0 + 32) as *const u8));
                let l11 = i32::from(*((arg0 + 40) as *const u8));
                let l13 = i32::from(*((arg0 + 48) as *const u8));
                let l15 = i32::from(*((arg0 + 64) as *const u8));
                let l18 = i32::from(*((arg0 + 76) as *const u8));
                let result21 = <_NfsMountImpl as GuestNfsMount>::setattr(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(l0 as u32 as usize), Vec::from_raw_parts(l1 as *mut _, len3, len3), match l4 {
                  0 => None,
                  1 => {
                    let e = {
                      let l5 = *((arg0 + 16) as *const i32);
                      let l6 = *((arg0 + 20) as *const i32);
                      
                      Time{
                        seconds: l5 as u32,
                        nseconds: l6 as u32,
                      }
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }, match l7 {
                  0 => None,
                  1 => {
                    let e = {
                      let l8 = *((arg0 + 28) as *const i32);
                      
                      l8 as u32
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }, match l9 {
                  0 => None,
                  1 => {
                    let e = {
                      let l10 = *((arg0 + 36) as *const i32);
                      
                      l10 as u32
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }, match l11 {
                  0 => None,
                  1 => {
                    let e = {
                      let l12 = *((arg0 + 44) as *const i32);
                      
                      l12 as u32
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }, match l13 {
                  0 => None,
                  1 => {
                    let e = {
                      let l14 = *((arg0 + 56) as *const i64);
                      
                      l14 as u64
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }, match l15 {
                  0 => None,
                  1 => {
                    let e = {
                      let l16 = *((arg0 + 68) as *const i32);
                      let l17 = *((arg0 + 72) as *const i32);
                      
                      Time{
                        seconds: l16 as u32,
                        nseconds: l17 as u32,
                      }
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }, match l18 {
                  0 => None,
                  1 => {
                    let e = {
                      let l19 = *((arg0 + 80) as *const i32);
                      let l20 = *((arg0 + 84) as *const i32);
                      
                      Time{
                        seconds: l19 as u32,
                        nseconds: l20 as u32,
                      }
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                });
                wit_bindgen::rt::dealloc(arg0, 88, 8);
                let ptr22 = _RET_AREA.0.as_mut_ptr() as i32;
                match result21 {
                  Ok(_) => { {
                    *((ptr22 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr22 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code23, message:message23, } = e;
                    match nfs_error_code23 {
                      Some(e) => {
                        *((ptr22 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr22 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr22 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec24 = (message23.into_bytes()).into_boxed_slice();
                    let ptr24 = vec24.as_ptr() as i32;
                    let len24 = vec24.len() as i32;
                    ::core::mem::forget(vec24);
                    *((ptr22 + 16) as *mut i32) = len24;
                    *((ptr22 + 12) as *mut i32) = ptr24;
                  } },
                };ptr22
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.setattr"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_setattr(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.setattr-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_setattr_path(arg0: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let l0 = *((arg0 + 0) as *const i32);
                let l1 = *((arg0 + 4) as *const i32);
                let l2 = *((arg0 + 8) as *const i32);
                let len3 = l2 as usize;
                let bytes3 = Vec::from_raw_parts(l1 as *mut _, len3, len3);
                let l4 = i32::from(*((arg0 + 12) as *const u8));
                let l5 = i32::from(*((arg0 + 16) as *const u8));
                let l7 = i32::from(*((arg0 + 24) as *const u8));
                let l9 = i32::from(*((arg0 + 32) as *const u8));
                let l11 = i32::from(*((arg0 + 40) as *const u8));
                let l13 = i32::from(*((arg0 + 56) as *const u8));
                let l16 = i32::from(*((arg0 + 68) as *const u8));
                let result19 = <_NfsMountImpl as GuestNfsMount>::setattr_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(l0 as u32 as usize), wit_bindgen::rt::string_lift(bytes3), wit_bindgen::rt::bool_lift(l4 as u8), match l5 {
                  0 => None,
                  1 => {
                    let e = {
                      let l6 = *((arg0 + 20) as *const i32);
                      
                      l6 as u32
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }, match l7 {
                  0 => None,
                  1 => {
                    let e = {
                      let l8 = *((arg0 + 28) as *const i32);
                      
                      l8 as u32
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }, match l9 {
                  0 => None,
                  1 => {
                    let e = {
                      let l10 = *((arg0 + 36) as *const i32);
                      
                      l10 as u32
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }, match l11 {
                  0 => None,
                  1 => {
                    let e = {
                      let l12 = *((arg0 + 48) as *const i64);
                      
                      l12 as u64
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }, match l13 {
                  0 => None,
                  1 => {
                    let e = {
                      let l14 = *((arg0 + 60) as *const i32);
                      let l15 = *((arg0 + 64) as *const i32);
                      
                      Time{
                        seconds: l14 as u32,
                        nseconds: l15 as u32,
                      }
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                }, match l16 {
                  0 => None,
                  1 => {
                    let e = {
                      let l17 = *((arg0 + 72) as *const i32);
                      let l18 = *((arg0 + 76) as *const i32);
                      
                      Time{
                        seconds: l17 as u32,
                        nseconds: l18 as u32,
                      }
                    };
                    Some(e)
                  }
                  _ => wit_bindgen::rt::invalid_enum_discriminant(),
                });
                wit_bindgen::rt::dealloc(arg0, 80, 8);
                let ptr20 = _RET_AREA.0.as_mut_ptr() as i32;
                match result19 {
                  Ok(_) => { {
                    *((ptr20 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr20 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code21, message:message21, } = e;
                    match nfs_error_code21 {
                      Some(e) => {
                        *((ptr20 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr20 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr20 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec22 = (message21.into_bytes()).into_boxed_slice();
                    let ptr22 = vec22.as_ptr() as i32;
                    let len22 = vec22.len() as i32;
                    ::core::mem::forget(vec22);
                    *((ptr20 + 16) as *mut i32) = len22;
                    *((ptr20 + 12) as *mut i32) = ptr22;
                  } },
                };ptr20
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.setattr-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_setattr_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.getfh"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_getfh(arg0: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let result0 = <_NfsMountImpl as GuestNfsMount>::getfh(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize));
                let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                match result0 {
                  Ok(_) => { {
                    *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code2, message:message2, } = e;
                    match nfs_error_code2 {
                      Some(e) => {
                        *((ptr1 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr1 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec3 = (message2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr1 + 16) as *mut i32) = len3;
                    *((ptr1 + 12) as *mut i32) = ptr3;
                  } },
                };ptr1
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.getfh"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_getfh(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.link"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_link(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let len1 = arg4 as usize;
                let len2 = arg6 as usize;
                let bytes2 = Vec::from_raw_parts(arg5 as *mut _, len2, len2);
                let result3 = <_NfsMountImpl as GuestNfsMount>::link(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0), Vec::from_raw_parts(arg3 as *mut _, len1, len1), wit_bindgen::rt::string_lift(bytes2));
                let ptr4 = _RET_AREA.0.as_mut_ptr() as i32;
                match result3 {
                  Ok(e) => { {
                    *((ptr4 + 0) as *mut u8) = (0i32) as u8;
                    let Attr{ attr_type:attr_type5, file_mode:file_mode5, nlink:nlink5, uid:uid5, gid:gid5, filesize:filesize5, used:used5, spec_data:spec_data5, fsid:fsid5, fileid:fileid5, atime:atime5, mtime:mtime5, ctime:ctime5, } = e;
                    *((ptr4 + 8) as *mut i32) = wit_bindgen::rt::as_i32(attr_type5);
                    *((ptr4 + 12) as *mut i32) = wit_bindgen::rt::as_i32(file_mode5);
                    *((ptr4 + 16) as *mut i32) = wit_bindgen::rt::as_i32(nlink5);
                    *((ptr4 + 20) as *mut i32) = wit_bindgen::rt::as_i32(uid5);
                    *((ptr4 + 24) as *mut i32) = wit_bindgen::rt::as_i32(gid5);
                    *((ptr4 + 32) as *mut i64) = wit_bindgen::rt::as_i64(filesize5);
                    *((ptr4 + 40) as *mut i64) = wit_bindgen::rt::as_i64(used5);
                    let (t6_0, t6_1, ) = spec_data5;
                    *((ptr4 + 48) as *mut i32) = wit_bindgen::rt::as_i32(t6_0);
                    *((ptr4 + 52) as *mut i32) = wit_bindgen::rt::as_i32(t6_1);
                    *((ptr4 + 56) as *mut i64) = wit_bindgen::rt::as_i64(fsid5);
                    *((ptr4 + 64) as *mut i64) = wit_bindgen::rt::as_i64(fileid5);
                    let Time{ seconds:seconds7, nseconds:nseconds7, } = atime5;
                    *((ptr4 + 72) as *mut i32) = wit_bindgen::rt::as_i32(seconds7);
                    *((ptr4 + 76) as *mut i32) = wit_bindgen::rt::as_i32(nseconds7);
                    let Time{ seconds:seconds8, nseconds:nseconds8, } = mtime5;
                    *((ptr4 + 80) as *mut i32) = wit_bindgen::rt::as_i32(seconds8);
                    *((ptr4 + 84) as *mut i32) = wit_bindgen::rt::as_i32(nseconds8);
                    let Time{ seconds:seconds9, nseconds:nseconds9, } = ctime5;
                    *((ptr4 + 88) as *mut i32) = wit_bindgen::rt::as_i32(seconds9);
                    *((ptr4 + 92) as *mut i32) = wit_bindgen::rt::as_i32(nseconds9);
                  } },
                  Err(e) => { {
                    *((ptr4 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code10, message:message10, } = e;
                    match nfs_error_code10 {
                      Some(e) => {
                        *((ptr4 + 8) as *mut u8) = (1i32) as u8;
                        *((ptr4 + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr4 + 8) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec11 = (message10.into_bytes()).into_boxed_slice();
                    let ptr11 = vec11.as_ptr() as i32;
                    let len11 = vec11.len() as i32;
                    ::core::mem::forget(vec11);
                    *((ptr4 + 20) as *mut i32) = len11;
                    *((ptr4 + 16) as *mut i32) = ptr11;
                  } },
                };ptr4
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.link"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_link(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 16) as *const i32);
                      let l2 = *((arg0 + 20) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.link-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_link_path(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let len1 = arg4 as usize;
                let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                let result2 = <_NfsMountImpl as GuestNfsMount>::link_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), wit_bindgen::rt::string_lift(bytes1));
                let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                match result2 {
                  Ok(e) => { {
                    *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                    let Attr{ attr_type:attr_type4, file_mode:file_mode4, nlink:nlink4, uid:uid4, gid:gid4, filesize:filesize4, used:used4, spec_data:spec_data4, fsid:fsid4, fileid:fileid4, atime:atime4, mtime:mtime4, ctime:ctime4, } = e;
                    *((ptr3 + 8) as *mut i32) = wit_bindgen::rt::as_i32(attr_type4);
                    *((ptr3 + 12) as *mut i32) = wit_bindgen::rt::as_i32(file_mode4);
                    *((ptr3 + 16) as *mut i32) = wit_bindgen::rt::as_i32(nlink4);
                    *((ptr3 + 20) as *mut i32) = wit_bindgen::rt::as_i32(uid4);
                    *((ptr3 + 24) as *mut i32) = wit_bindgen::rt::as_i32(gid4);
                    *((ptr3 + 32) as *mut i64) = wit_bindgen::rt::as_i64(filesize4);
                    *((ptr3 + 40) as *mut i64) = wit_bindgen::rt::as_i64(used4);
                    let (t5_0, t5_1, ) = spec_data4;
                    *((ptr3 + 48) as *mut i32) = wit_bindgen::rt::as_i32(t5_0);
                    *((ptr3 + 52) as *mut i32) = wit_bindgen::rt::as_i32(t5_1);
                    *((ptr3 + 56) as *mut i64) = wit_bindgen::rt::as_i64(fsid4);
                    *((ptr3 + 64) as *mut i64) = wit_bindgen::rt::as_i64(fileid4);
                    let Time{ seconds:seconds6, nseconds:nseconds6, } = atime4;
                    *((ptr3 + 72) as *mut i32) = wit_bindgen::rt::as_i32(seconds6);
                    *((ptr3 + 76) as *mut i32) = wit_bindgen::rt::as_i32(nseconds6);
                    let Time{ seconds:seconds7, nseconds:nseconds7, } = mtime4;
                    *((ptr3 + 80) as *mut i32) = wit_bindgen::rt::as_i32(seconds7);
                    *((ptr3 + 84) as *mut i32) = wit_bindgen::rt::as_i32(nseconds7);
                    let Time{ seconds:seconds8, nseconds:nseconds8, } = ctime4;
                    *((ptr3 + 88) as *mut i32) = wit_bindgen::rt::as_i32(seconds8);
                    *((ptr3 + 92) as *mut i32) = wit_bindgen::rt::as_i32(nseconds8);
                  } },
                  Err(e) => { {
                    *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code9, message:message9, } = e;
                    match nfs_error_code9 {
                      Some(e) => {
                        *((ptr3 + 8) as *mut u8) = (1i32) as u8;
                        *((ptr3 + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr3 + 8) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec10 = (message9.into_bytes()).into_boxed_slice();
                    let ptr10 = vec10.as_ptr() as i32;
                    let len10 = vec10.len() as i32;
                    ::core::mem::forget(vec10);
                    *((ptr3 + 20) as *mut i32) = len10;
                    *((ptr3 + 16) as *mut i32) = ptr10;
                  } },
                };ptr3
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.link-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_link_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 16) as *const i32);
                      let l2 = *((arg0 + 20) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.symlink"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_symlink(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let len1 = arg4 as usize;
                let len2 = arg6 as usize;
                let bytes2 = Vec::from_raw_parts(arg5 as *mut _, len2, len2);
                let result3 = <_NfsMountImpl as GuestNfsMount>::symlink(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), Vec::from_raw_parts(arg3 as *mut _, len1, len1), wit_bindgen::rt::string_lift(bytes2));
                let ptr4 = _RET_AREA.0.as_mut_ptr() as i32;
                match result3 {
                  Ok(e) => { {
                    *((ptr4 + 0) as *mut u8) = (0i32) as u8;
                    let vec5 = (e).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr4 + 8) as *mut i32) = len5;
                    *((ptr4 + 4) as *mut i32) = ptr5;
                  } },
                  Err(e) => { {
                    *((ptr4 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code6, message:message6, } = e;
                    match nfs_error_code6 {
                      Some(e) => {
                        *((ptr4 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr4 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr4 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec7 = (message6.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr() as i32;
                    let len7 = vec7.len() as i32;
                    ::core::mem::forget(vec7);
                    *((ptr4 + 16) as *mut i32) = len7;
                    *((ptr4 + 12) as *mut i32) = ptr7;
                  } },
                };ptr4
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.symlink"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_symlink(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      let base3 = l1;
                      let len3 = l2;
                      wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                    },
                    _ => {
                      let l4 = *((arg0 + 12) as *const i32);
                      let l5 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.symlink-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_symlink_path(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let len1 = arg4 as usize;
                let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                let result2 = <_NfsMountImpl as GuestNfsMount>::symlink_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), wit_bindgen::rt::string_lift(bytes1));
                let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                match result2 {
                  Ok(e) => { {
                    *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                    let vec4 = (e).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((ptr3 + 8) as *mut i32) = len4;
                    *((ptr3 + 4) as *mut i32) = ptr4;
                  } },
                  Err(e) => { {
                    *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code5, message:message5, } = e;
                    match nfs_error_code5 {
                      Some(e) => {
                        *((ptr3 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr3 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr3 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec6 = (message5.into_bytes()).into_boxed_slice();
                    let ptr6 = vec6.as_ptr() as i32;
                    let len6 = vec6.len() as i32;
                    ::core::mem::forget(vec6);
                    *((ptr3 + 16) as *mut i32) = len6;
                    *((ptr3 + 12) as *mut i32) = ptr6;
                  } },
                };ptr3
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.symlink-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_symlink_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      let base3 = l1;
                      let len3 = l2;
                      wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                    },
                    _ => {
                      let l4 = *((arg0 + 12) as *const i32);
                      let l5 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.readlink"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_readlink(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let result1 = <_NfsMountImpl as GuestNfsMount>::readlink(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let vec3 = (e.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr2 + 8) as *mut i32) = len3;
                    *((ptr2 + 4) as *mut i32) = ptr3;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code4, message:message4, } = e;
                    match nfs_error_code4 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec5 = (message4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr2 + 16) as *mut i32) = len5;
                    *((ptr2 + 12) as *mut i32) = ptr5;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.readlink"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_readlink(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                    _ => {
                      let l3 = *((arg0 + 12) as *const i32);
                      let l4 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.readlink-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_readlink_path(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::readlink_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let vec3 = (e.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr2 + 8) as *mut i32) = len3;
                    *((ptr2 + 4) as *mut i32) = ptr3;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code4, message:message4, } = e;
                    match nfs_error_code4 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec5 = (message4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr2 + 16) as *mut i32) = len5;
                    *((ptr2 + 12) as *mut i32) = ptr5;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.readlink-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_readlink_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                    _ => {
                      let l3 = *((arg0 + 12) as *const i32);
                      let l4 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l3, (l4) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.lookup"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_lookup(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let len1 = arg4 as usize;
                let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                let result2 = <_NfsMountImpl as GuestNfsMount>::lookup(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0), wit_bindgen::rt::string_lift(bytes1));
                let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                match result2 {
                  Ok(e) => { {
                    *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                    let vec4 = (e).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((ptr3 + 8) as *mut i32) = len4;
                    *((ptr3 + 4) as *mut i32) = ptr4;
                  } },
                  Err(e) => { {
                    *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code5, message:message5, } = e;
                    match nfs_error_code5 {
                      Some(e) => {
                        *((ptr3 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr3 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr3 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec6 = (message5.into_bytes()).into_boxed_slice();
                    let ptr6 = vec6.as_ptr() as i32;
                    let len6 = vec6.len() as i32;
                    ::core::mem::forget(vec6);
                    *((ptr3 + 16) as *mut i32) = len6;
                    *((ptr3 + 12) as *mut i32) = ptr6;
                  } },
                };ptr3
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.lookup"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_lookup(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      let base3 = l1;
                      let len3 = l2;
                      wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                    },
                    _ => {
                      let l4 = *((arg0 + 12) as *const i32);
                      let l5 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.lookup-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_lookup_path(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::lookup_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let vec3 = (e).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr2 + 8) as *mut i32) = len3;
                    *((ptr2 + 4) as *mut i32) = ptr3;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code4, message:message4, } = e;
                    match nfs_error_code4 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec5 = (message4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr2 + 16) as *mut i32) = len5;
                    *((ptr2 + 12) as *mut i32) = ptr5;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.lookup-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_lookup_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      let base3 = l1;
                      let len3 = l2;
                      wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                    },
                    _ => {
                      let l4 = *((arg0 + 12) as *const i32);
                      let l5 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.pathconf"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_pathconf(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let result1 = <_NfsMountImpl as GuestNfsMount>::pathconf(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let PathConf{ attr:attr3, linkmax:linkmax3, name_max:name_max3, no_trunc:no_trunc3, chown_restricted:chown_restricted3, case_insensitive:case_insensitive3, case_preserving:case_preserving3, } = e;
                    match attr3 {
                      Some(e) => {
                        *((ptr2 + 8) as *mut u8) = (1i32) as u8;
                        let Attr{ attr_type:attr_type4, file_mode:file_mode4, nlink:nlink4, uid:uid4, gid:gid4, filesize:filesize4, used:used4, spec_data:spec_data4, fsid:fsid4, fileid:fileid4, atime:atime4, mtime:mtime4, ctime:ctime4, } = e;
                        *((ptr2 + 16) as *mut i32) = wit_bindgen::rt::as_i32(attr_type4);
                        *((ptr2 + 20) as *mut i32) = wit_bindgen::rt::as_i32(file_mode4);
                        *((ptr2 + 24) as *mut i32) = wit_bindgen::rt::as_i32(nlink4);
                        *((ptr2 + 28) as *mut i32) = wit_bindgen::rt::as_i32(uid4);
                        *((ptr2 + 32) as *mut i32) = wit_bindgen::rt::as_i32(gid4);
                        *((ptr2 + 40) as *mut i64) = wit_bindgen::rt::as_i64(filesize4);
                        *((ptr2 + 48) as *mut i64) = wit_bindgen::rt::as_i64(used4);
                        let (t5_0, t5_1, ) = spec_data4;
                        *((ptr2 + 56) as *mut i32) = wit_bindgen::rt::as_i32(t5_0);
                        *((ptr2 + 60) as *mut i32) = wit_bindgen::rt::as_i32(t5_1);
                        *((ptr2 + 64) as *mut i64) = wit_bindgen::rt::as_i64(fsid4);
                        *((ptr2 + 72) as *mut i64) = wit_bindgen::rt::as_i64(fileid4);
                        let Time{ seconds:seconds6, nseconds:nseconds6, } = atime4;
                        *((ptr2 + 80) as *mut i32) = wit_bindgen::rt::as_i32(seconds6);
                        *((ptr2 + 84) as *mut i32) = wit_bindgen::rt::as_i32(nseconds6);
                        let Time{ seconds:seconds7, nseconds:nseconds7, } = mtime4;
                        *((ptr2 + 88) as *mut i32) = wit_bindgen::rt::as_i32(seconds7);
                        *((ptr2 + 92) as *mut i32) = wit_bindgen::rt::as_i32(nseconds7);
                        let Time{ seconds:seconds8, nseconds:nseconds8, } = ctime4;
                        *((ptr2 + 96) as *mut i32) = wit_bindgen::rt::as_i32(seconds8);
                        *((ptr2 + 100) as *mut i32) = wit_bindgen::rt::as_i32(nseconds8);
                      },
                      None => {
                        {
                          *((ptr2 + 8) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };*((ptr2 + 104) as *mut i32) = wit_bindgen::rt::as_i32(linkmax3);
                    *((ptr2 + 108) as *mut i32) = wit_bindgen::rt::as_i32(name_max3);
                    *((ptr2 + 112) as *mut u8) = (match no_trunc3 { true => 1, false => 0 }) as u8;
                    *((ptr2 + 113) as *mut u8) = (match chown_restricted3 { true => 1, false => 0 }) as u8;
                    *((ptr2 + 114) as *mut u8) = (match case_insensitive3 { true => 1, false => 0 }) as u8;
                    *((ptr2 + 115) as *mut u8) = (match case_preserving3 { true => 1, false => 0 }) as u8;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code9, message:message9, } = e;
                    match nfs_error_code9 {
                      Some(e) => {
                        *((ptr2 + 8) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 8) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec10 = (message9.into_bytes()).into_boxed_slice();
                    let ptr10 = vec10.as_ptr() as i32;
                    let len10 = vec10.len() as i32;
                    ::core::mem::forget(vec10);
                    *((ptr2 + 20) as *mut i32) = len10;
                    *((ptr2 + 16) as *mut i32) = ptr10;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.pathconf"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_pathconf(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 16) as *const i32);
                      let l2 = *((arg0 + 20) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.pathconf-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_pathconf_path(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::pathconf_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let PathConf{ attr:attr3, linkmax:linkmax3, name_max:name_max3, no_trunc:no_trunc3, chown_restricted:chown_restricted3, case_insensitive:case_insensitive3, case_preserving:case_preserving3, } = e;
                    match attr3 {
                      Some(e) => {
                        *((ptr2 + 8) as *mut u8) = (1i32) as u8;
                        let Attr{ attr_type:attr_type4, file_mode:file_mode4, nlink:nlink4, uid:uid4, gid:gid4, filesize:filesize4, used:used4, spec_data:spec_data4, fsid:fsid4, fileid:fileid4, atime:atime4, mtime:mtime4, ctime:ctime4, } = e;
                        *((ptr2 + 16) as *mut i32) = wit_bindgen::rt::as_i32(attr_type4);
                        *((ptr2 + 20) as *mut i32) = wit_bindgen::rt::as_i32(file_mode4);
                        *((ptr2 + 24) as *mut i32) = wit_bindgen::rt::as_i32(nlink4);
                        *((ptr2 + 28) as *mut i32) = wit_bindgen::rt::as_i32(uid4);
                        *((ptr2 + 32) as *mut i32) = wit_bindgen::rt::as_i32(gid4);
                        *((ptr2 + 40) as *mut i64) = wit_bindgen::rt::as_i64(filesize4);
                        *((ptr2 + 48) as *mut i64) = wit_bindgen::rt::as_i64(used4);
                        let (t5_0, t5_1, ) = spec_data4;
                        *((ptr2 + 56) as *mut i32) = wit_bindgen::rt::as_i32(t5_0);
                        *((ptr2 + 60) as *mut i32) = wit_bindgen::rt::as_i32(t5_1);
                        *((ptr2 + 64) as *mut i64) = wit_bindgen::rt::as_i64(fsid4);
                        *((ptr2 + 72) as *mut i64) = wit_bindgen::rt::as_i64(fileid4);
                        let Time{ seconds:seconds6, nseconds:nseconds6, } = atime4;
                        *((ptr2 + 80) as *mut i32) = wit_bindgen::rt::as_i32(seconds6);
                        *((ptr2 + 84) as *mut i32) = wit_bindgen::rt::as_i32(nseconds6);
                        let Time{ seconds:seconds7, nseconds:nseconds7, } = mtime4;
                        *((ptr2 + 88) as *mut i32) = wit_bindgen::rt::as_i32(seconds7);
                        *((ptr2 + 92) as *mut i32) = wit_bindgen::rt::as_i32(nseconds7);
                        let Time{ seconds:seconds8, nseconds:nseconds8, } = ctime4;
                        *((ptr2 + 96) as *mut i32) = wit_bindgen::rt::as_i32(seconds8);
                        *((ptr2 + 100) as *mut i32) = wit_bindgen::rt::as_i32(nseconds8);
                      },
                      None => {
                        {
                          *((ptr2 + 8) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };*((ptr2 + 104) as *mut i32) = wit_bindgen::rt::as_i32(linkmax3);
                    *((ptr2 + 108) as *mut i32) = wit_bindgen::rt::as_i32(name_max3);
                    *((ptr2 + 112) as *mut u8) = (match no_trunc3 { true => 1, false => 0 }) as u8;
                    *((ptr2 + 113) as *mut u8) = (match chown_restricted3 { true => 1, false => 0 }) as u8;
                    *((ptr2 + 114) as *mut u8) = (match case_insensitive3 { true => 1, false => 0 }) as u8;
                    *((ptr2 + 115) as *mut u8) = (match case_preserving3 { true => 1, false => 0 }) as u8;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code9, message:message9, } = e;
                    match nfs_error_code9 {
                      Some(e) => {
                        *((ptr2 + 8) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 12) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 8) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec10 = (message9.into_bytes()).into_boxed_slice();
                    let ptr10 = vec10.as_ptr() as i32;
                    let len10 = vec10.len() as i32;
                    ::core::mem::forget(vec10);
                    *((ptr2 + 20) as *mut i32) = len10;
                    *((ptr2 + 16) as *mut i32) = ptr10;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.pathconf-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_pathconf_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 16) as *const i32);
                      let l2 = *((arg0 + 20) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.read"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_read(arg0: i32,arg1: i32,arg2: i32,arg3: i64,arg4: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let result1 = <_NfsMountImpl as GuestNfsMount>::read(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0), arg3 as u64, arg4 as u32);
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let vec3 = (e).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr2 + 8) as *mut i32) = len3;
                    *((ptr2 + 4) as *mut i32) = ptr3;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code4, message:message4, } = e;
                    match nfs_error_code4 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec5 = (message4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr2 + 16) as *mut i32) = len5;
                    *((ptr2 + 12) as *mut i32) = ptr5;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.read"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_read(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      let base3 = l1;
                      let len3 = l2;
                      wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                    },
                    _ => {
                      let l4 = *((arg0 + 12) as *const i32);
                      let l5 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.read-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_read_path(arg0: i32,arg1: i32,arg2: i32,arg3: i64,arg4: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::read_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), arg3 as u64, arg4 as u32);
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let vec3 = (e).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr2 + 8) as *mut i32) = len3;
                    *((ptr2 + 4) as *mut i32) = ptr3;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code4, message:message4, } = e;
                    match nfs_error_code4 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec5 = (message4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr2 + 16) as *mut i32) = len5;
                    *((ptr2 + 12) as *mut i32) = ptr5;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.read-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_read_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      let base3 = l1;
                      let len3 = l2;
                      wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                    },
                    _ => {
                      let l4 = *((arg0 + 12) as *const i32);
                      let l5 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.write"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_write(arg0: i32,arg1: i32,arg2: i32,arg3: i64,arg4: i32,arg5: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let len1 = arg5 as usize;
                let result2 = <_NfsMountImpl as GuestNfsMount>::write(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0), arg3 as u64, Vec::from_raw_parts(arg4 as *mut _, len1, len1));
                let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                match result2 {
                  Ok(e) => { {
                    *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                    *((ptr3 + 4) as *mut i32) = wit_bindgen::rt::as_i32(e);
                  } },
                  Err(e) => { {
                    *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code4, message:message4, } = e;
                    match nfs_error_code4 {
                      Some(e) => {
                        *((ptr3 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr3 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr3 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec5 = (message4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr3 + 16) as *mut i32) = len5;
                    *((ptr3 + 12) as *mut i32) = ptr5;
                  } },
                };ptr3
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.write"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_write(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.write-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_write_path(arg0: i32,arg1: i32,arg2: i32,arg3: i64,arg4: i32,arg5: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let len1 = arg5 as usize;
                let result2 = <_NfsMountImpl as GuestNfsMount>::write_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), arg3 as u64, Vec::from_raw_parts(arg4 as *mut _, len1, len1));
                let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                match result2 {
                  Ok(e) => { {
                    *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                    *((ptr3 + 4) as *mut i32) = wit_bindgen::rt::as_i32(e);
                  } },
                  Err(e) => { {
                    *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code4, message:message4, } = e;
                    match nfs_error_code4 {
                      Some(e) => {
                        *((ptr3 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr3 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr3 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec5 = (message4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr3 + 16) as *mut i32) = len5;
                    *((ptr3 + 12) as *mut i32) = ptr5;
                  } },
                };ptr3
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.write-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_write_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.readdir"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_readdir(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let result1 = <_NfsMountImpl as GuestNfsMount>::readdir(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let vec5 = e;
                    let len5 = vec5.len() as i32;
                    let layout5 = alloc::Layout::from_size_align_unchecked(vec5.len() * 24, 8);
                    let result5 = if layout5.size() != 0
                    {
                      let ptr = alloc::alloc(layout5);
                      if ptr.is_null()
                      {
                        alloc::handle_alloc_error(layout5);
                      }
                      ptr
                    }else {{
                      ::core::ptr::null_mut()
                    }};
                    for (i, e) in vec5.into_iter().enumerate() {
                      let base = result5 as i32 + (i as i32) * 24;
                      {
                        let ReaddirEntry{ fileid:fileid3, file_name:file_name3, cookie:cookie3, } = e;
                        *((base + 0) as *mut i64) = wit_bindgen::rt::as_i64(fileid3);
                        let vec4 = (file_name3.into_bytes()).into_boxed_slice();
                        let ptr4 = vec4.as_ptr() as i32;
                        let len4 = vec4.len() as i32;
                        ::core::mem::forget(vec4);
                        *((base + 12) as *mut i32) = len4;
                        *((base + 8) as *mut i32) = ptr4;
                        *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(cookie3);
                      }
                    }
                    *((ptr2 + 8) as *mut i32) = len5;
                    *((ptr2 + 4) as *mut i32) = result5 as i32;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code6, message:message6, } = e;
                    match nfs_error_code6 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec7 = (message6.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr() as i32;
                    let len7 = vec7.len() as i32;
                    ::core::mem::forget(vec7);
                    *((ptr2 + 16) as *mut i32) = len7;
                    *((ptr2 + 12) as *mut i32) = ptr7;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.readdir"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_readdir(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l3 = *((arg0 + 4) as *const i32);
                      let l4 = *((arg0 + 8) as *const i32);
                      let base5 = l3;
                      let len5 = l4;
                      for i in 0..len5 {
                        let base = base5 + i *24;
                        {
                          let l1 = *((base + 8) as *const i32);
                          let l2 = *((base + 12) as *const i32);
                          wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                        }
                      }
                      wit_bindgen::rt::dealloc(base5, (len5 as usize) * 24, 8);
                    },
                    _ => {
                      let l6 = *((arg0 + 12) as *const i32);
                      let l7 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l6, (l7) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.readdir-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_readdir_path(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::readdir_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let vec5 = e;
                    let len5 = vec5.len() as i32;
                    let layout5 = alloc::Layout::from_size_align_unchecked(vec5.len() * 24, 8);
                    let result5 = if layout5.size() != 0
                    {
                      let ptr = alloc::alloc(layout5);
                      if ptr.is_null()
                      {
                        alloc::handle_alloc_error(layout5);
                      }
                      ptr
                    }else {{
                      ::core::ptr::null_mut()
                    }};
                    for (i, e) in vec5.into_iter().enumerate() {
                      let base = result5 as i32 + (i as i32) * 24;
                      {
                        let ReaddirEntry{ fileid:fileid3, file_name:file_name3, cookie:cookie3, } = e;
                        *((base + 0) as *mut i64) = wit_bindgen::rt::as_i64(fileid3);
                        let vec4 = (file_name3.into_bytes()).into_boxed_slice();
                        let ptr4 = vec4.as_ptr() as i32;
                        let len4 = vec4.len() as i32;
                        ::core::mem::forget(vec4);
                        *((base + 12) as *mut i32) = len4;
                        *((base + 8) as *mut i32) = ptr4;
                        *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(cookie3);
                      }
                    }
                    *((ptr2 + 8) as *mut i32) = len5;
                    *((ptr2 + 4) as *mut i32) = result5 as i32;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code6, message:message6, } = e;
                    match nfs_error_code6 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec7 = (message6.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr() as i32;
                    let len7 = vec7.len() as i32;
                    ::core::mem::forget(vec7);
                    *((ptr2 + 16) as *mut i32) = len7;
                    *((ptr2 + 12) as *mut i32) = ptr7;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.readdir-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_readdir_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l3 = *((arg0 + 4) as *const i32);
                      let l4 = *((arg0 + 8) as *const i32);
                      let base5 = l3;
                      let len5 = l4;
                      for i in 0..len5 {
                        let base = base5 + i *24;
                        {
                          let l1 = *((base + 8) as *const i32);
                          let l2 = *((base + 12) as *const i32);
                          wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                        }
                      }
                      wit_bindgen::rt::dealloc(base5, (len5 as usize) * 24, 8);
                    },
                    _ => {
                      let l6 = *((arg0 + 12) as *const i32);
                      let l7 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l6, (l7) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.readdirplus"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_readdirplus(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let result1 = <_NfsMountImpl as GuestNfsMount>::readdirplus(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let vec11 = e;
                    let len11 = vec11.len() as i32;
                    let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 128, 8);
                    let result11 = if layout11.size() != 0
                    {
                      let ptr = alloc::alloc(layout11);
                      if ptr.is_null()
                      {
                        alloc::handle_alloc_error(layout11);
                      }
                      ptr
                    }else {{
                      ::core::ptr::null_mut()
                    }};
                    for (i, e) in vec11.into_iter().enumerate() {
                      let base = result11 as i32 + (i as i32) * 128;
                      {
                        let ReaddirplusEntry{ fileid:fileid3, file_name:file_name3, cookie:cookie3, attr:attr3, handle:handle3, } = e;
                        *((base + 0) as *mut i64) = wit_bindgen::rt::as_i64(fileid3);
                        let vec4 = (file_name3.into_bytes()).into_boxed_slice();
                        let ptr4 = vec4.as_ptr() as i32;
                        let len4 = vec4.len() as i32;
                        ::core::mem::forget(vec4);
                        *((base + 12) as *mut i32) = len4;
                        *((base + 8) as *mut i32) = ptr4;
                        *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(cookie3);
                        match attr3 {
                          Some(e) => {
                            *((base + 24) as *mut u8) = (1i32) as u8;
                            let Attr{ attr_type:attr_type5, file_mode:file_mode5, nlink:nlink5, uid:uid5, gid:gid5, filesize:filesize5, used:used5, spec_data:spec_data5, fsid:fsid5, fileid:fileid5, atime:atime5, mtime:mtime5, ctime:ctime5, } = e;
                            *((base + 32) as *mut i32) = wit_bindgen::rt::as_i32(attr_type5);
                            *((base + 36) as *mut i32) = wit_bindgen::rt::as_i32(file_mode5);
                            *((base + 40) as *mut i32) = wit_bindgen::rt::as_i32(nlink5);
                            *((base + 44) as *mut i32) = wit_bindgen::rt::as_i32(uid5);
                            *((base + 48) as *mut i32) = wit_bindgen::rt::as_i32(gid5);
                            *((base + 56) as *mut i64) = wit_bindgen::rt::as_i64(filesize5);
                            *((base + 64) as *mut i64) = wit_bindgen::rt::as_i64(used5);
                            let (t6_0, t6_1, ) = spec_data5;
                            *((base + 72) as *mut i32) = wit_bindgen::rt::as_i32(t6_0);
                            *((base + 76) as *mut i32) = wit_bindgen::rt::as_i32(t6_1);
                            *((base + 80) as *mut i64) = wit_bindgen::rt::as_i64(fsid5);
                            *((base + 88) as *mut i64) = wit_bindgen::rt::as_i64(fileid5);
                            let Time{ seconds:seconds7, nseconds:nseconds7, } = atime5;
                            *((base + 96) as *mut i32) = wit_bindgen::rt::as_i32(seconds7);
                            *((base + 100) as *mut i32) = wit_bindgen::rt::as_i32(nseconds7);
                            let Time{ seconds:seconds8, nseconds:nseconds8, } = mtime5;
                            *((base + 104) as *mut i32) = wit_bindgen::rt::as_i32(seconds8);
                            *((base + 108) as *mut i32) = wit_bindgen::rt::as_i32(nseconds8);
                            let Time{ seconds:seconds9, nseconds:nseconds9, } = ctime5;
                            *((base + 112) as *mut i32) = wit_bindgen::rt::as_i32(seconds9);
                            *((base + 116) as *mut i32) = wit_bindgen::rt::as_i32(nseconds9);
                          },
                          None => {
                            {
                              *((base + 24) as *mut u8) = (0i32) as u8;
                            }
                          },
                        };let vec10 = (handle3).into_boxed_slice();
                        let ptr10 = vec10.as_ptr() as i32;
                        let len10 = vec10.len() as i32;
                        ::core::mem::forget(vec10);
                        *((base + 124) as *mut i32) = len10;
                        *((base + 120) as *mut i32) = ptr10;
                      }
                    }
                    *((ptr2 + 8) as *mut i32) = len11;
                    *((ptr2 + 4) as *mut i32) = result11 as i32;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code12, message:message12, } = e;
                    match nfs_error_code12 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec13 = (message12.into_bytes()).into_boxed_slice();
                    let ptr13 = vec13.as_ptr() as i32;
                    let len13 = vec13.len() as i32;
                    ::core::mem::forget(vec13);
                    *((ptr2 + 16) as *mut i32) = len13;
                    *((ptr2 + 12) as *mut i32) = ptr13;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.readdirplus"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_readdirplus(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l6 = *((arg0 + 4) as *const i32);
                      let l7 = *((arg0 + 8) as *const i32);
                      let base8 = l6;
                      let len8 = l7;
                      for i in 0..len8 {
                        let base = base8 + i *128;
                        {
                          let l1 = *((base + 8) as *const i32);
                          let l2 = *((base + 12) as *const i32);
                          wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                          let l3 = *((base + 120) as *const i32);
                          let l4 = *((base + 124) as *const i32);
                          let base5 = l3;
                          let len5 = l4;
                          wit_bindgen::rt::dealloc(base5, (len5 as usize) * 1, 1);
                        }
                      }
                      wit_bindgen::rt::dealloc(base8, (len8 as usize) * 128, 8);
                    },
                    _ => {
                      let l9 = *((arg0 + 12) as *const i32);
                      let l10 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l9, (l10) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.readdirplus-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_readdirplus_path(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::readdirplus_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let vec11 = e;
                    let len11 = vec11.len() as i32;
                    let layout11 = alloc::Layout::from_size_align_unchecked(vec11.len() * 128, 8);
                    let result11 = if layout11.size() != 0
                    {
                      let ptr = alloc::alloc(layout11);
                      if ptr.is_null()
                      {
                        alloc::handle_alloc_error(layout11);
                      }
                      ptr
                    }else {{
                      ::core::ptr::null_mut()
                    }};
                    for (i, e) in vec11.into_iter().enumerate() {
                      let base = result11 as i32 + (i as i32) * 128;
                      {
                        let ReaddirplusEntry{ fileid:fileid3, file_name:file_name3, cookie:cookie3, attr:attr3, handle:handle3, } = e;
                        *((base + 0) as *mut i64) = wit_bindgen::rt::as_i64(fileid3);
                        let vec4 = (file_name3.into_bytes()).into_boxed_slice();
                        let ptr4 = vec4.as_ptr() as i32;
                        let len4 = vec4.len() as i32;
                        ::core::mem::forget(vec4);
                        *((base + 12) as *mut i32) = len4;
                        *((base + 8) as *mut i32) = ptr4;
                        *((base + 16) as *mut i64) = wit_bindgen::rt::as_i64(cookie3);
                        match attr3 {
                          Some(e) => {
                            *((base + 24) as *mut u8) = (1i32) as u8;
                            let Attr{ attr_type:attr_type5, file_mode:file_mode5, nlink:nlink5, uid:uid5, gid:gid5, filesize:filesize5, used:used5, spec_data:spec_data5, fsid:fsid5, fileid:fileid5, atime:atime5, mtime:mtime5, ctime:ctime5, } = e;
                            *((base + 32) as *mut i32) = wit_bindgen::rt::as_i32(attr_type5);
                            *((base + 36) as *mut i32) = wit_bindgen::rt::as_i32(file_mode5);
                            *((base + 40) as *mut i32) = wit_bindgen::rt::as_i32(nlink5);
                            *((base + 44) as *mut i32) = wit_bindgen::rt::as_i32(uid5);
                            *((base + 48) as *mut i32) = wit_bindgen::rt::as_i32(gid5);
                            *((base + 56) as *mut i64) = wit_bindgen::rt::as_i64(filesize5);
                            *((base + 64) as *mut i64) = wit_bindgen::rt::as_i64(used5);
                            let (t6_0, t6_1, ) = spec_data5;
                            *((base + 72) as *mut i32) = wit_bindgen::rt::as_i32(t6_0);
                            *((base + 76) as *mut i32) = wit_bindgen::rt::as_i32(t6_1);
                            *((base + 80) as *mut i64) = wit_bindgen::rt::as_i64(fsid5);
                            *((base + 88) as *mut i64) = wit_bindgen::rt::as_i64(fileid5);
                            let Time{ seconds:seconds7, nseconds:nseconds7, } = atime5;
                            *((base + 96) as *mut i32) = wit_bindgen::rt::as_i32(seconds7);
                            *((base + 100) as *mut i32) = wit_bindgen::rt::as_i32(nseconds7);
                            let Time{ seconds:seconds8, nseconds:nseconds8, } = mtime5;
                            *((base + 104) as *mut i32) = wit_bindgen::rt::as_i32(seconds8);
                            *((base + 108) as *mut i32) = wit_bindgen::rt::as_i32(nseconds8);
                            let Time{ seconds:seconds9, nseconds:nseconds9, } = ctime5;
                            *((base + 112) as *mut i32) = wit_bindgen::rt::as_i32(seconds9);
                            *((base + 116) as *mut i32) = wit_bindgen::rt::as_i32(nseconds9);
                          },
                          None => {
                            {
                              *((base + 24) as *mut u8) = (0i32) as u8;
                            }
                          },
                        };let vec10 = (handle3).into_boxed_slice();
                        let ptr10 = vec10.as_ptr() as i32;
                        let len10 = vec10.len() as i32;
                        ::core::mem::forget(vec10);
                        *((base + 124) as *mut i32) = len10;
                        *((base + 120) as *mut i32) = ptr10;
                      }
                    }
                    *((ptr2 + 8) as *mut i32) = len11;
                    *((ptr2 + 4) as *mut i32) = result11 as i32;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code12, message:message12, } = e;
                    match nfs_error_code12 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec13 = (message12.into_bytes()).into_boxed_slice();
                    let ptr13 = vec13.as_ptr() as i32;
                    let len13 = vec13.len() as i32;
                    ::core::mem::forget(vec13);
                    *((ptr2 + 16) as *mut i32) = len13;
                    *((ptr2 + 12) as *mut i32) = ptr13;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.readdirplus-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_readdirplus_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l6 = *((arg0 + 4) as *const i32);
                      let l7 = *((arg0 + 8) as *const i32);
                      let base8 = l6;
                      let len8 = l7;
                      for i in 0..len8 {
                        let base = base8 + i *128;
                        {
                          let l1 = *((base + 8) as *const i32);
                          let l2 = *((base + 12) as *const i32);
                          wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                          let l3 = *((base + 120) as *const i32);
                          let l4 = *((base + 124) as *const i32);
                          let base5 = l3;
                          let len5 = l4;
                          wit_bindgen::rt::dealloc(base5, (len5 as usize) * 1, 1);
                        }
                      }
                      wit_bindgen::rt::dealloc(base8, (len8 as usize) * 128, 8);
                    },
                    _ => {
                      let l9 = *((arg0 + 12) as *const i32);
                      let l10 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l9, (l10) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.mkdir"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_mkdir(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let len1 = arg4 as usize;
                let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                let result2 = <_NfsMountImpl as GuestNfsMount>::mkdir(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0), wit_bindgen::rt::string_lift(bytes1), arg5 as u32);
                let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                match result2 {
                  Ok(e) => { {
                    *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                    let vec4 = (e).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((ptr3 + 8) as *mut i32) = len4;
                    *((ptr3 + 4) as *mut i32) = ptr4;
                  } },
                  Err(e) => { {
                    *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code5, message:message5, } = e;
                    match nfs_error_code5 {
                      Some(e) => {
                        *((ptr3 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr3 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr3 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec6 = (message5.into_bytes()).into_boxed_slice();
                    let ptr6 = vec6.as_ptr() as i32;
                    let len6 = vec6.len() as i32;
                    ::core::mem::forget(vec6);
                    *((ptr3 + 16) as *mut i32) = len6;
                    *((ptr3 + 12) as *mut i32) = ptr6;
                  } },
                };ptr3
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.mkdir"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_mkdir(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      let base3 = l1;
                      let len3 = l2;
                      wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                    },
                    _ => {
                      let l4 = *((arg0 + 12) as *const i32);
                      let l5 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.mkdir-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_mkdir_path(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::mkdir_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), arg3 as u32);
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(e) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                    let vec3 = (e).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr2 + 8) as *mut i32) = len3;
                    *((ptr2 + 4) as *mut i32) = ptr3;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code4, message:message4, } = e;
                    match nfs_error_code4 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec5 = (message4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr2 + 16) as *mut i32) = len5;
                    *((ptr2 + 12) as *mut i32) = ptr5;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.mkdir-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_mkdir_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => {
                      let l1 = *((arg0 + 4) as *const i32);
                      let l2 = *((arg0 + 8) as *const i32);
                      let base3 = l1;
                      let len3 = l2;
                      wit_bindgen::rt::dealloc(base3, (len3 as usize) * 1, 1);
                    },
                    _ => {
                      let l4 = *((arg0 + 12) as *const i32);
                      let l5 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.remove"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_remove(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let len1 = arg4 as usize;
                let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                let result2 = <_NfsMountImpl as GuestNfsMount>::remove(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0), wit_bindgen::rt::string_lift(bytes1));
                let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                match result2 {
                  Ok(_) => { {
                    *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code4, message:message4, } = e;
                    match nfs_error_code4 {
                      Some(e) => {
                        *((ptr3 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr3 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr3 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec5 = (message4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr3 + 16) as *mut i32) = len5;
                    *((ptr3 + 12) as *mut i32) = ptr5;
                  } },
                };ptr3
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.remove"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_remove(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.remove-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_remove_path(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::remove_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(_) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code3, message:message3, } = e;
                    match nfs_error_code3 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec4 = (message3.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((ptr2 + 16) as *mut i32) = len4;
                    *((ptr2 + 12) as *mut i32) = ptr4;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.remove-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_remove_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.rmdir"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_rmdir(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let len1 = arg4 as usize;
                let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                let result2 = <_NfsMountImpl as GuestNfsMount>::rmdir(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0), wit_bindgen::rt::string_lift(bytes1));
                let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                match result2 {
                  Ok(_) => { {
                    *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code4, message:message4, } = e;
                    match nfs_error_code4 {
                      Some(e) => {
                        *((ptr3 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr3 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr3 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec5 = (message4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr3 + 16) as *mut i32) = len5;
                    *((ptr3 + 12) as *mut i32) = ptr5;
                  } },
                };ptr3
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.rmdir"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_rmdir(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.rmdir-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_rmdir_path(arg0: i32,arg1: i32,arg2: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let result1 = <_NfsMountImpl as GuestNfsMount>::rmdir_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0));
                let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
                match result1 {
                  Ok(_) => { {
                    *((ptr2 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code3, message:message3, } = e;
                    match nfs_error_code3 {
                      Some(e) => {
                        *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr2 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec4 = (message3.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr() as i32;
                    let len4 = vec4.len() as i32;
                    ::core::mem::forget(vec4);
                    *((ptr2 + 16) as *mut i32) = len4;
                    *((ptr2 + 12) as *mut i32) = ptr4;
                  } },
                };ptr2
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.rmdir-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_rmdir_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.rename"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_rename(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,arg6: i32,arg7: i32,arg8: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let len1 = arg4 as usize;
                let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                let len2 = arg6 as usize;
                let len3 = arg8 as usize;
                let bytes3 = Vec::from_raw_parts(arg7 as *mut _, len3, len3);
                let result4 = <_NfsMountImpl as GuestNfsMount>::rename(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), Vec::from_raw_parts(arg1 as *mut _, len0, len0), wit_bindgen::rt::string_lift(bytes1), Vec::from_raw_parts(arg5 as *mut _, len2, len2), wit_bindgen::rt::string_lift(bytes3));
                let ptr5 = _RET_AREA.0.as_mut_ptr() as i32;
                match result4 {
                  Ok(_) => { {
                    *((ptr5 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr5 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code6, message:message6, } = e;
                    match nfs_error_code6 {
                      Some(e) => {
                        *((ptr5 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr5 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr5 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec7 = (message6.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr() as i32;
                    let len7 = vec7.len() as i32;
                    ::core::mem::forget(vec7);
                    *((ptr5 + 16) as *mut i32) = len7;
                    *((ptr5 + 12) as *mut i32) = ptr7;
                  } },
                };ptr5
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.rename"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_rename(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.rename-path"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_rename_path(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let len0 = arg2 as usize;
                let bytes0 = Vec::from_raw_parts(arg1 as *mut _, len0, len0);
                let len1 = arg4 as usize;
                let bytes1 = Vec::from_raw_parts(arg3 as *mut _, len1, len1);
                let result2 = <_NfsMountImpl as GuestNfsMount>::rename_path(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize), wit_bindgen::rt::string_lift(bytes0), wit_bindgen::rt::string_lift(bytes1));
                let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
                match result2 {
                  Ok(_) => { {
                    *((ptr3 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr3 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code4, message:message4, } = e;
                    match nfs_error_code4 {
                      Some(e) => {
                        *((ptr3 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr3 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr3 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec5 = (message4.into_bytes()).into_boxed_slice();
                    let ptr5 = vec5.as_ptr() as i32;
                    let len5 = vec5.len() as i32;
                    ::core::mem::forget(vec5);
                    *((ptr3 + 16) as *mut i32) = len5;
                    *((ptr3 + 12) as *mut i32) = ptr5;
                  } },
                };ptr3
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.rename-path"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_rename_path(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            const _: () = {
              
              #[doc(hidden)]
              #[export_name = "component:nfs-rs/nfs#[method]nfs-mount.umount"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn __export_method_nfs_mount_umount(arg0: i32,) -> i32 {
                #[allow(unused_imports)]
                use wit_bindgen::rt::{alloc, vec::Vec, string::String};
                
                // Before executing any other code, use this function to run all static
                // constructors, if they have not yet been run. This is a hack required
                // to work around wasi-libc ctors calling import functions to initialize
                // the environment.
                //
                // This functionality will be removed once rust 1.69.0 is stable, at which
                // point wasi-libc will no longer have this behavior.
                //
                // See
                // https://github.com/bytecodealliance/preview2-prototyping/issues/99
                // for more details.
                #[cfg(target_arch="wasm32")]
                wit_bindgen::rt::run_ctors_once();
                
                let result0 = <_NfsMountImpl as GuestNfsMount>::umount(wit_bindgen::rt::Resource::<NfsMount>::lift_borrow(arg0 as u32 as usize));
                let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
                match result0 {
                  Ok(_) => { {
                    *((ptr1 + 0) as *mut u8) = (0i32) as u8;
                  } },
                  Err(e) => { {
                    *((ptr1 + 0) as *mut u8) = (1i32) as u8;
                    let Error{ nfs_error_code:nfs_error_code2, message:message2, } = e;
                    match nfs_error_code2 {
                      Some(e) => {
                        *((ptr1 + 4) as *mut u8) = (1i32) as u8;
                        *((ptr1 + 8) as *mut i32) = wit_bindgen::rt::as_i32(e);
                      },
                      None => {
                        {
                          *((ptr1 + 4) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec3 = (message2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr() as i32;
                    let len3 = vec3.len() as i32;
                    ::core::mem::forget(vec3);
                    *((ptr1 + 16) as *mut i32) = len3;
                    *((ptr1 + 12) as *mut i32) = ptr3;
                  } },
                };ptr1
              }
              
              const _: () = {
                #[doc(hidden)]
                #[export_name = "cabi_post_component:nfs-rs/nfs#[method]nfs-mount.umount"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn __post_return_method_nfs_mount_umount(arg0: i32,) {
                  let l0 = i32::from(*((arg0 + 0) as *const u8));
                  match l0 {
                    0 => (),
                    _ => {
                      let l1 = *((arg0 + 12) as *const i32);
                      let l2 = *((arg0 + 16) as *const i32);
                      wit_bindgen::rt::dealloc(l1, (l2) as usize, 1);
                    },
                  }
                }
              };
            };
            use super::super::super::super::super::Component as _GuestImpl;
            pub trait Guest {
              fn parse_url_and_mount(url: wit_bindgen::rt::string::String,) -> Result<OwnNfsMount,Error>;
            }
            use super::super::super::super::super::NfsMount as _NfsMountImpl;
            pub trait GuestNfsMount {
              fn null_op(&self,) -> Result<(),Error>;
              fn access(&self,fh: wit_bindgen::rt::vec::Vec::<u8>,mode: u32,) -> Result<u32,Error>;
              fn access_path(&self,path: wit_bindgen::rt::string::String,mode: u32,) -> Result<u32,Error>;
              fn close(&self,seqid: u32,stateid: u64,) -> Result<(),Error>;
              fn commit(&self,fh: wit_bindgen::rt::vec::Vec::<u8>,offset: u64,count: u32,) -> Result<(),Error>;
              fn commit_path(&self,path: wit_bindgen::rt::string::String,offset: u64,count: u32,) -> Result<(),Error>;
              fn create(&self,dir_fh: wit_bindgen::rt::vec::Vec::<u8>,filename: wit_bindgen::rt::string::String,mode: u32,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,Error>;
              fn create_path(&self,path: wit_bindgen::rt::string::String,mode: u32,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,Error>;
              fn delegpurge(&self,clientid: u64,) -> Result<(),Error>;
              fn delegreturn(&self,stateid: u64,) -> Result<(),Error>;
              fn getattr(&self,fh: wit_bindgen::rt::vec::Vec::<u8>,) -> Result<Attr,Error>;
              fn getattr_path(&self,path: wit_bindgen::rt::string::String,) -> Result<Attr,Error>;
              fn setattr(&self,fh: wit_bindgen::rt::vec::Vec::<u8>,guard_ctime: Option<Time>,mode: Option<u32>,uid: Option<u32>,gid: Option<u32>,size: Option<u64>,atime: Option<Time>,mtime: Option<Time>,) -> Result<(),Error>;
              fn setattr_path(&self,path: wit_bindgen::rt::string::String,specify_guard: bool,mode: Option<u32>,uid: Option<u32>,gid: Option<u32>,size: Option<u64>,atime: Option<Time>,mtime: Option<Time>,) -> Result<(),Error>;
              fn getfh(&self,) -> Result<(),Error>;
              fn link(&self,src_fh: wit_bindgen::rt::vec::Vec::<u8>,dst_dir_fh: wit_bindgen::rt::vec::Vec::<u8>,dst_filename: wit_bindgen::rt::string::String,) -> Result<Attr,Error>;
              fn link_path(&self,src_path: wit_bindgen::rt::string::String,dst_path: wit_bindgen::rt::string::String,) -> Result<Attr,Error>;
              fn symlink(&self,src_path: wit_bindgen::rt::string::String,dst_dir_fh: wit_bindgen::rt::vec::Vec::<u8>,dst_filename: wit_bindgen::rt::string::String,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,Error>;
              fn symlink_path(&self,src_path: wit_bindgen::rt::string::String,dst_path: wit_bindgen::rt::string::String,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,Error>;
              fn readlink(&self,fh: wit_bindgen::rt::vec::Vec::<u8>,) -> Result<wit_bindgen::rt::string::String,Error>;
              fn readlink_path(&self,path: wit_bindgen::rt::string::String,) -> Result<wit_bindgen::rt::string::String,Error>;
              fn lookup(&self,dir_fh: wit_bindgen::rt::vec::Vec::<u8>,filename: wit_bindgen::rt::string::String,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,Error>;
              fn lookup_path(&self,path: wit_bindgen::rt::string::String,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,Error>;
              fn pathconf(&self,fh: wit_bindgen::rt::vec::Vec::<u8>,) -> Result<PathConf,Error>;
              fn pathconf_path(&self,path: wit_bindgen::rt::string::String,) -> Result<PathConf,Error>;
              fn read(&self,fh: wit_bindgen::rt::vec::Vec::<u8>,offset: u64,count: u32,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,Error>;
              fn read_path(&self,path: wit_bindgen::rt::string::String,offset: u64,count: u32,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,Error>;
              fn write(&self,fh: wit_bindgen::rt::vec::Vec::<u8>,offset: u64,data: wit_bindgen::rt::vec::Vec::<u8>,) -> Result<u32,Error>;
              fn write_path(&self,path: wit_bindgen::rt::string::String,offset: u64,data: wit_bindgen::rt::vec::Vec::<u8>,) -> Result<u32,Error>;
              fn readdir(&self,dir_fh: wit_bindgen::rt::vec::Vec::<u8>,) -> Result<wit_bindgen::rt::vec::Vec::<ReaddirEntry>,Error>;
              fn readdir_path(&self,dir_path: wit_bindgen::rt::string::String,) -> Result<wit_bindgen::rt::vec::Vec::<ReaddirEntry>,Error>;
              fn readdirplus(&self,dir_fh: wit_bindgen::rt::vec::Vec::<u8>,) -> Result<wit_bindgen::rt::vec::Vec::<ReaddirplusEntry>,Error>;
              fn readdirplus_path(&self,dir_path: wit_bindgen::rt::string::String,) -> Result<wit_bindgen::rt::vec::Vec::<ReaddirplusEntry>,Error>;
              fn mkdir(&self,dir_fh: wit_bindgen::rt::vec::Vec::<u8>,dirname: wit_bindgen::rt::string::String,mode: u32,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,Error>;
              fn mkdir_path(&self,path: wit_bindgen::rt::string::String,mode: u32,) -> Result<wit_bindgen::rt::vec::Vec::<u8>,Error>;
              fn remove(&self,dir_fh: wit_bindgen::rt::vec::Vec::<u8>,filename: wit_bindgen::rt::string::String,) -> Result<(),Error>;
              fn remove_path(&self,path: wit_bindgen::rt::string::String,) -> Result<(),Error>;
              fn rmdir(&self,dir_fh: wit_bindgen::rt::vec::Vec::<u8>,dirname: wit_bindgen::rt::string::String,) -> Result<(),Error>;
              fn rmdir_path(&self,path: wit_bindgen::rt::string::String,) -> Result<(),Error>;
              fn rename(&self,from_dir_fh: wit_bindgen::rt::vec::Vec::<u8>,from_filename: wit_bindgen::rt::string::String,to_dir_fh: wit_bindgen::rt::vec::Vec::<u8>,to_filename: wit_bindgen::rt::string::String,) -> Result<(),Error>;
              fn rename_path(&self,from_path: wit_bindgen::rt::string::String,to_path: wit_bindgen::rt::string::String,) -> Result<(),Error>;
              fn umount(&self,) -> Result<(),Error>;
            }
            
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            #[repr(align(8))]
            struct _RetArea([u8; 120]);
            static mut _RET_AREA: _RetArea = _RetArea([0; 120]);
            
          }
          
        }
      }
    }
    
    #[cfg(target_arch = "wasm32")]
    #[link_section = "component-type:nfs-rs"]
    #[doc(hidden)]
    pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 10695] = [3, 0, 6, 110, 102, 115, 45, 114, 115, 0, 97, 115, 109, 13, 0, 1, 0, 7, 163, 23, 1, 65, 2, 1, 66, 115, 1, 114, 2, 7, 115, 101, 99, 111, 110, 100, 115, 121, 8, 110, 115, 101, 99, 111, 110, 100, 115, 121, 4, 0, 4, 116, 105, 109, 101, 3, 0, 0, 1, 111, 2, 121, 121, 1, 114, 13, 9, 97, 116, 116, 114, 45, 116, 121, 112, 101, 121, 9, 102, 105, 108, 101, 45, 109, 111, 100, 101, 121, 5, 110, 108, 105, 110, 107, 121, 3, 117, 105, 100, 121, 3, 103, 105, 100, 121, 8, 102, 105, 108, 101, 115, 105, 122, 101, 119, 4, 117, 115, 101, 100, 119, 9, 115, 112, 101, 99, 45, 100, 97, 116, 97, 2, 4, 102, 115, 105, 100, 119, 6, 102, 105, 108, 101, 105, 100, 119, 5, 97, 116, 105, 109, 101, 1, 5, 109, 116, 105, 109, 101, 1, 5, 99, 116, 105, 109, 101, 1, 4, 0, 4, 97, 116, 116, 114, 3, 0, 3, 1, 107, 4, 1, 114, 7, 4, 97, 116, 116, 114, 5, 7, 108, 105, 110, 107, 109, 97, 120, 121, 8, 110, 97, 109, 101, 45, 109, 97, 120, 121, 8, 110, 111, 45, 116, 114, 117, 110, 99, 127, 16, 99, 104, 111, 119, 110, 45, 114, 101, 115, 116, 114, 105, 99, 116, 101, 100, 127, 16, 99, 97, 115, 101, 45, 105, 110, 115, 101, 110, 115, 105, 116, 105, 118, 101, 127, 15, 99, 97, 115, 101, 45, 112, 114, 101, 115, 101, 114, 118, 105, 110, 103, 127, 4, 0, 9, 112, 97, 116, 104, 45, 99, 111, 110, 102, 3, 0, 6, 1, 114, 3, 6, 102, 105, 108, 101, 105, 100, 119, 9, 102, 105, 108, 101, 45, 110, 97, 109, 101, 115, 6, 99, 111, 111, 107, 105, 101, 119, 4, 0, 13, 114, 101, 97, 100, 100, 105, 114, 45, 101, 110, 116, 114, 121, 3, 0, 8, 1, 112, 125, 1, 114, 5, 6, 102, 105, 108, 101, 105, 100, 119, 9, 102, 105, 108, 101, 45, 110, 97, 109, 101, 115, 6, 99, 111, 111, 107, 105, 101, 119, 4, 97, 116, 116, 114, 5, 6, 104, 97, 110, 100, 108, 101, 10, 4, 0, 17, 114, 101, 97, 100, 100, 105, 114, 112, 108, 117, 115, 45, 101, 110, 116, 114, 121, 3, 0, 11, 1, 107, 122, 1, 114, 2, 14, 110, 102, 115, 45, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 13, 7, 109, 101, 115, 115, 97, 103, 101, 115, 4, 0, 5, 101, 114, 114, 111, 114, 3, 0, 14, 4, 0, 9, 110, 102, 115, 45, 109, 111, 117, 110, 116, 3, 1, 1, 104, 16, 1, 106, 0, 1, 15, 1, 64, 1, 4, 115, 101, 108, 102, 17, 0, 18, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 110, 117, 108, 108, 45, 111, 112, 1, 19, 1, 106, 1, 121, 1, 15, 1, 64, 3, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 4, 109, 111, 100, 101, 121, 0, 20, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 97, 99, 99, 101, 115, 115, 1, 21, 1, 64, 3, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 4, 109, 111, 100, 101, 121, 0, 20, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 97, 99, 99, 101, 115, 115, 45, 112, 97, 116, 104, 1, 22, 1, 64, 3, 4, 115, 101, 108, 102, 17, 5, 115, 101, 113, 105, 100, 121, 7, 115, 116, 97, 116, 101, 105, 100, 119, 0, 18, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 99, 108, 111, 115, 101, 1, 23, 1, 64, 4, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 6, 111, 102, 102, 115, 101, 116, 119, 5, 99, 111, 117, 110, 116, 121, 0, 18, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 99, 111, 109, 109, 105, 116, 1, 24, 1, 64, 4, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 6, 111, 102, 102, 115, 101, 116, 119, 5, 99, 111, 117, 110, 116, 121, 0, 18, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 99, 111, 109, 109, 105, 116, 45, 112, 97, 116, 104, 1, 25, 1, 106, 1, 10, 1, 15, 1, 64, 4, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 8, 102, 105, 108, 101, 110, 97, 109, 101, 115, 4, 109, 111, 100, 101, 121, 0, 26, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 99, 114, 101, 97, 116, 101, 1, 27, 1, 64, 3, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 4, 109, 111, 100, 101, 121, 0, 26, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 99, 114, 101, 97, 116, 101, 45, 112, 97, 116, 104, 1, 28, 1, 64, 2, 4, 115, 101, 108, 102, 17, 8, 99, 108, 105, 101, 110, 116, 105, 100, 119, 0, 18, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 100, 101, 108, 101, 103, 112, 117, 114, 103, 101, 1, 29, 1, 64, 2, 4, 115, 101, 108, 102, 17, 7, 115, 116, 97, 116, 101, 105, 100, 119, 0, 18, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 100, 101, 108, 101, 103, 114, 101, 116, 117, 114, 110, 1, 30, 1, 106, 1, 4, 1, 15, 1, 64, 2, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 0, 31, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 103, 101, 116, 97, 116, 116, 114, 1, 32, 1, 64, 2, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 0, 31, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 103, 101, 116, 97, 116, 116, 114, 45, 112, 97, 116, 104, 1, 33, 1, 107, 1, 1, 107, 121, 1, 107, 119, 1, 64, 9, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 11, 103, 117, 97, 114, 100, 45, 99, 116, 105, 109, 101, 34, 4, 109, 111, 100, 101, 35, 3, 117, 105, 100, 35, 3, 103, 105, 100, 35, 4, 115, 105, 122, 101, 36, 5, 97, 116, 105, 109, 101, 34, 5, 109, 116, 105, 109, 101, 34, 0, 18, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 115, 101, 116, 97, 116, 116, 114, 1, 37, 1, 64, 9, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 13, 115, 112, 101, 99, 105, 102, 121, 45, 103, 117, 97, 114, 100, 127, 4, 109, 111, 100, 101, 35, 3, 117, 105, 100, 35, 3, 103, 105, 100, 35, 4, 115, 105, 122, 101, 36, 5, 97, 116, 105, 109, 101, 34, 5, 109, 116, 105, 109, 101, 34, 0, 18, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 115, 101, 116, 97, 116, 116, 114, 45, 112, 97, 116, 104, 1, 38, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 103, 101, 116, 102, 104, 1, 19, 1, 64, 4, 4, 115, 101, 108, 102, 17, 6, 115, 114, 99, 45, 102, 104, 10, 10, 100, 115, 116, 45, 100, 105, 114, 45, 102, 104, 10, 12, 100, 115, 116, 45, 102, 105, 108, 101, 110, 97, 109, 101, 115, 0, 31, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 108, 105, 110, 107, 1, 39, 1, 64, 3, 4, 115, 101, 108, 102, 17, 8, 115, 114, 99, 45, 112, 97, 116, 104, 115, 8, 100, 115, 116, 45, 112, 97, 116, 104, 115, 0, 31, 4, 0, 27, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 108, 105, 110, 107, 45, 112, 97, 116, 104, 1, 40, 1, 64, 4, 4, 115, 101, 108, 102, 17, 8, 115, 114, 99, 45, 112, 97, 116, 104, 115, 10, 100, 115, 116, 45, 100, 105, 114, 45, 102, 104, 10, 12, 100, 115, 116, 45, 102, 105, 108, 101, 110, 97, 109, 101, 115, 0, 26, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 115, 121, 109, 108, 105, 110, 107, 1, 41, 1, 64, 3, 4, 115, 101, 108, 102, 17, 8, 115, 114, 99, 45, 112, 97, 116, 104, 115, 8, 100, 115, 116, 45, 112, 97, 116, 104, 115, 0, 26, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 115, 121, 109, 108, 105, 110, 107, 45, 112, 97, 116, 104, 1, 42, 1, 106, 1, 115, 1, 15, 1, 64, 2, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 0, 43, 4, 0, 26, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 108, 105, 110, 107, 1, 44, 1, 64, 2, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 0, 43, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 108, 105, 110, 107, 45, 112, 97, 116, 104, 1, 45, 1, 64, 3, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 8, 102, 105, 108, 101, 110, 97, 109, 101, 115, 0, 26, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 108, 111, 111, 107, 117, 112, 1, 46, 1, 64, 2, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 0, 26, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 108, 111, 111, 107, 117, 112, 45, 112, 97, 116, 104, 1, 47, 1, 106, 1, 7, 1, 15, 1, 64, 2, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 0, 48, 4, 0, 26, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 112, 97, 116, 104, 99, 111, 110, 102, 1, 49, 1, 64, 2, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 0, 48, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 112, 97, 116, 104, 99, 111, 110, 102, 45, 112, 97, 116, 104, 1, 50, 1, 64, 4, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 6, 111, 102, 102, 115, 101, 116, 119, 5, 99, 111, 117, 110, 116, 121, 0, 26, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 1, 51, 1, 64, 4, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 6, 111, 102, 102, 115, 101, 116, 119, 5, 99, 111, 117, 110, 116, 121, 0, 26, 4, 0, 27, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 45, 112, 97, 116, 104, 1, 52, 1, 64, 4, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 6, 111, 102, 102, 115, 101, 116, 119, 4, 100, 97, 116, 97, 10, 0, 20, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 119, 114, 105, 116, 101, 1, 53, 1, 64, 4, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 6, 111, 102, 102, 115, 101, 116, 119, 4, 100, 97, 116, 97, 10, 0, 20, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 119, 114, 105, 116, 101, 45, 112, 97, 116, 104, 1, 54, 1, 112, 9, 1, 106, 1, 55, 1, 15, 1, 64, 2, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 0, 56, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 100, 105, 114, 1, 57, 1, 64, 2, 4, 115, 101, 108, 102, 17, 8, 100, 105, 114, 45, 112, 97, 116, 104, 115, 0, 56, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 100, 105, 114, 45, 112, 97, 116, 104, 1, 58, 1, 112, 12, 1, 106, 1, 59, 1, 15, 1, 64, 2, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 0, 60, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 100, 105, 114, 112, 108, 117, 115, 1, 61, 1, 64, 2, 4, 115, 101, 108, 102, 17, 8, 100, 105, 114, 45, 112, 97, 116, 104, 115, 0, 60, 4, 0, 34, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 100, 105, 114, 112, 108, 117, 115, 45, 112, 97, 116, 104, 1, 62, 1, 64, 4, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 7, 100, 105, 114, 110, 97, 109, 101, 115, 4, 109, 111, 100, 101, 121, 0, 26, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 109, 107, 100, 105, 114, 1, 63, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 109, 107, 100, 105, 114, 45, 112, 97, 116, 104, 1, 28, 1, 64, 3, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 8, 102, 105, 108, 101, 110, 97, 109, 101, 115, 0, 18, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 109, 111, 118, 101, 1, 64, 1, 64, 2, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 0, 18, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 109, 111, 118, 101, 45, 112, 97, 116, 104, 1, 65, 1, 64, 3, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 7, 100, 105, 114, 110, 97, 109, 101, 115, 0, 18, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 109, 100, 105, 114, 1, 66, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 109, 100, 105, 114, 45, 112, 97, 116, 104, 1, 65, 1, 64, 5, 4, 115, 101, 108, 102, 17, 11, 102, 114, 111, 109, 45, 100, 105, 114, 45, 102, 104, 10, 13, 102, 114, 111, 109, 45, 102, 105, 108, 101, 110, 97, 109, 101, 115, 9, 116, 111, 45, 100, 105, 114, 45, 102, 104, 10, 11, 116, 111, 45, 102, 105, 108, 101, 110, 97, 109, 101, 115, 0, 18, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 110, 97, 109, 101, 1, 67, 1, 64, 3, 4, 115, 101, 108, 102, 17, 9, 102, 114, 111, 109, 45, 112, 97, 116, 104, 115, 7, 116, 111, 45, 112, 97, 116, 104, 115, 0, 18, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 110, 97, 109, 101, 45, 112, 97, 116, 104, 1, 68, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 117, 109, 111, 117, 110, 116, 1, 19, 1, 105, 16, 1, 106, 1, 197, 0, 1, 15, 1, 64, 1, 3, 117, 114, 108, 115, 0, 198, 0, 4, 0, 19, 112, 97, 114, 115, 101, 45, 117, 114, 108, 45, 97, 110, 100, 45, 109, 111, 117, 110, 116, 1, 71, 4, 1, 20, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 110, 102, 115, 45, 114, 115, 47, 110, 102, 115, 5, 0, 11, 9, 1, 0, 3, 110, 102, 115, 3, 0, 0, 7, 154, 59, 1, 65, 2, 1, 65, 31, 1, 66, 10, 4, 0, 8, 112, 111, 108, 108, 97, 98, 108, 101, 3, 1, 1, 104, 0, 1, 64, 1, 4, 115, 101, 108, 102, 1, 0, 127, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 112, 111, 108, 108, 97, 98, 108, 101, 46, 114, 101, 97, 100, 121, 1, 2, 1, 64, 1, 4, 115, 101, 108, 102, 1, 1, 0, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 112, 111, 108, 108, 97, 98, 108, 101, 46, 98, 108, 111, 99, 107, 1, 3, 1, 112, 1, 1, 112, 121, 1, 64, 1, 2, 105, 110, 4, 0, 5, 4, 0, 4, 112, 111, 108, 108, 1, 6, 3, 1, 18, 119, 97, 115, 105, 58, 105, 111, 47, 112, 111, 108, 108, 64, 48, 46, 50, 46, 48, 5, 0, 1, 66, 4, 4, 0, 5, 101, 114, 114, 111, 114, 3, 1, 1, 104, 0, 1, 64, 1, 4, 115, 101, 108, 102, 1, 0, 115, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 101, 114, 114, 111, 114, 46, 116, 111, 45, 100, 101, 98, 117, 103, 45, 115, 116, 114, 105, 110, 103, 1, 2, 3, 1, 19, 119, 97, 115, 105, 58, 105, 111, 47, 101, 114, 114, 111, 114, 64, 48, 46, 50, 46, 48, 5, 1, 2, 3, 0, 1, 5, 101, 114, 114, 111, 114, 2, 3, 0, 0, 8, 112, 111, 108, 108, 97, 98, 108, 101, 1, 66, 40, 2, 3, 2, 1, 2, 4, 0, 5, 101, 114, 114, 111, 114, 3, 0, 0, 2, 3, 2, 1, 3, 4, 0, 8, 112, 111, 108, 108, 97, 98, 108, 101, 3, 0, 2, 1, 105, 1, 1, 113, 2, 21, 108, 97, 115, 116, 45, 111, 112, 101, 114, 97, 116, 105, 111, 110, 45, 102, 97, 105, 108, 101, 100, 1, 4, 0, 6, 99, 108, 111, 115, 101, 100, 0, 0, 4, 0, 12, 115, 116, 114, 101, 97, 109, 45, 101, 114, 114, 111, 114, 3, 0, 5, 4, 0, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 3, 1, 4, 0, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 3, 1, 1, 104, 7, 1, 112, 125, 1, 106, 1, 10, 1, 6, 1, 64, 2, 4, 115, 101, 108, 102, 9, 3, 108, 101, 110, 119, 0, 11, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 114, 101, 97, 100, 1, 12, 4, 0, 34, 91, 109, 101, 116, 104, 111, 100, 93, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 98, 108, 111, 99, 107, 105, 110, 103, 45, 114, 101, 97, 100, 1, 12, 1, 106, 1, 119, 1, 6, 1, 64, 2, 4, 115, 101, 108, 102, 9, 3, 108, 101, 110, 119, 0, 13, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 115, 107, 105, 112, 1, 14, 4, 0, 34, 91, 109, 101, 116, 104, 111, 100, 93, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 98, 108, 111, 99, 107, 105, 110, 103, 45, 115, 107, 105, 112, 1, 14, 1, 105, 3, 1, 64, 1, 4, 115, 101, 108, 102, 9, 0, 15, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 115, 117, 98, 115, 99, 114, 105, 98, 101, 1, 16, 1, 104, 8, 1, 64, 1, 4, 115, 101, 108, 102, 17, 0, 13, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 99, 104, 101, 99, 107, 45, 119, 114, 105, 116, 101, 1, 18, 1, 106, 0, 1, 6, 1, 64, 2, 4, 115, 101, 108, 102, 17, 8, 99, 111, 110, 116, 101, 110, 116, 115, 10, 0, 19, 4, 0, 27, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 119, 114, 105, 116, 101, 1, 20, 4, 0, 46, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 98, 108, 111, 99, 107, 105, 110, 103, 45, 119, 114, 105, 116, 101, 45, 97, 110, 100, 45, 102, 108, 117, 115, 104, 1, 20, 1, 64, 1, 4, 115, 101, 108, 102, 17, 0, 19, 4, 0, 27, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 102, 108, 117, 115, 104, 1, 21, 4, 0, 36, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 98, 108, 111, 99, 107, 105, 110, 103, 45, 102, 108, 117, 115, 104, 1, 21, 1, 64, 1, 4, 115, 101, 108, 102, 17, 0, 15, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 115, 117, 98, 115, 99, 114, 105, 98, 101, 1, 22, 1, 64, 2, 4, 115, 101, 108, 102, 17, 3, 108, 101, 110, 119, 0, 19, 4, 0, 34, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 119, 114, 105, 116, 101, 45, 122, 101, 114, 111, 101, 115, 1, 23, 4, 0, 53, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 98, 108, 111, 99, 107, 105, 110, 103, 45, 119, 114, 105, 116, 101, 45, 122, 101, 114, 111, 101, 115, 45, 97, 110, 100, 45, 102, 108, 117, 115, 104, 1, 23, 1, 64, 3, 4, 115, 101, 108, 102, 17, 3, 115, 114, 99, 9, 3, 108, 101, 110, 119, 0, 13, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 115, 112, 108, 105, 99, 101, 1, 24, 4, 0, 37, 91, 109, 101, 116, 104, 111, 100, 93, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 46, 98, 108, 111, 99, 107, 105, 110, 103, 45, 115, 112, 108, 105, 99, 101, 1, 24, 3, 1, 21, 119, 97, 115, 105, 58, 105, 111, 47, 115, 116, 114, 101, 97, 109, 115, 64, 48, 46, 50, 46, 48, 5, 4, 1, 66, 17, 4, 0, 7, 110, 101, 116, 119, 111, 114, 107, 3, 1, 1, 109, 21, 7, 117, 110, 107, 110, 111, 119, 110, 13, 97, 99, 99, 101, 115, 115, 45, 100, 101, 110, 105, 101, 100, 13, 110, 111, 116, 45, 115, 117, 112, 112, 111, 114, 116, 101, 100, 16, 105, 110, 118, 97, 108, 105, 100, 45, 97, 114, 103, 117, 109, 101, 110, 116, 13, 111, 117, 116, 45, 111, 102, 45, 109, 101, 109, 111, 114, 121, 7, 116, 105, 109, 101, 111, 117, 116, 20, 99, 111, 110, 99, 117, 114, 114, 101, 110, 99, 121, 45, 99, 111, 110, 102, 108, 105, 99, 116, 15, 110, 111, 116, 45, 105, 110, 45, 112, 114, 111, 103, 114, 101, 115, 115, 11, 119, 111, 117, 108, 100, 45, 98, 108, 111, 99, 107, 13, 105, 110, 118, 97, 108, 105, 100, 45, 115, 116, 97, 116, 101, 16, 110, 101, 119, 45, 115, 111, 99, 107, 101, 116, 45, 108, 105, 109, 105, 116, 20, 97, 100, 100, 114, 101, 115, 115, 45, 110, 111, 116, 45, 98, 105, 110, 100, 97, 98, 108, 101, 14, 97, 100, 100, 114, 101, 115, 115, 45, 105, 110, 45, 117, 115, 101, 18, 114, 101, 109, 111, 116, 101, 45, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 18, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 45, 114, 101, 102, 117, 115, 101, 100, 16, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 45, 114, 101, 115, 101, 116, 18, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 45, 97, 98, 111, 114, 116, 101, 100, 18, 100, 97, 116, 97, 103, 114, 97, 109, 45, 116, 111, 111, 45, 108, 97, 114, 103, 101, 17, 110, 97, 109, 101, 45, 117, 110, 114, 101, 115, 111, 108, 118, 97, 98, 108, 101, 26, 116, 101, 109, 112, 111, 114, 97, 114, 121, 45, 114, 101, 115, 111, 108, 118, 101, 114, 45, 102, 97, 105, 108, 117, 114, 101, 26, 112, 101, 114, 109, 97, 110, 101, 110, 116, 45, 114, 101, 115, 111, 108, 118, 101, 114, 45, 102, 97, 105, 108, 117, 114, 101, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 1, 1, 109, 2, 4, 105, 112, 118, 52, 4, 105, 112, 118, 54, 4, 0, 17, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 3, 0, 3, 1, 111, 4, 125, 125, 125, 125, 4, 0, 12, 105, 112, 118, 52, 45, 97, 100, 100, 114, 101, 115, 115, 3, 0, 5, 1, 111, 8, 123, 123, 123, 123, 123, 123, 123, 123, 4, 0, 12, 105, 112, 118, 54, 45, 97, 100, 100, 114, 101, 115, 115, 3, 0, 7, 1, 113, 2, 4, 105, 112, 118, 52, 1, 6, 0, 4, 105, 112, 118, 54, 1, 8, 0, 4, 0, 10, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 3, 0, 9, 1, 114, 2, 4, 112, 111, 114, 116, 123, 7, 97, 100, 100, 114, 101, 115, 115, 6, 4, 0, 19, 105, 112, 118, 52, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101, 115, 115, 3, 0, 11, 1, 114, 4, 4, 112, 111, 114, 116, 123, 9, 102, 108, 111, 119, 45, 105, 110, 102, 111, 121, 7, 97, 100, 100, 114, 101, 115, 115, 8, 8, 115, 99, 111, 112, 101, 45, 105, 100, 121, 4, 0, 19, 105, 112, 118, 54, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101, 115, 115, 3, 0, 13, 1, 113, 2, 4, 105, 112, 118, 52, 1, 12, 0, 4, 105, 112, 118, 54, 1, 14, 0, 4, 0, 17, 105, 112, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101, 115, 115, 3, 0, 15, 3, 1, 26, 119, 97, 115, 105, 58, 115, 111, 99, 107, 101, 116, 115, 47, 110, 101, 116, 119, 111, 114, 107, 64, 48, 46, 50, 46, 48, 5, 5, 2, 3, 0, 3, 7, 110, 101, 116, 119, 111, 114, 107, 1, 66, 5, 2, 3, 2, 1, 6, 4, 0, 7, 110, 101, 116, 119, 111, 114, 107, 3, 0, 0, 1, 105, 1, 1, 64, 0, 0, 2, 4, 0, 16, 105, 110, 115, 116, 97, 110, 99, 101, 45, 110, 101, 116, 119, 111, 114, 107, 1, 3, 3, 1, 35, 119, 97, 115, 105, 58, 115, 111, 99, 107, 101, 116, 115, 47, 105, 110, 115, 116, 97, 110, 99, 101, 45, 110, 101, 116, 119, 111, 114, 107, 64, 48, 46, 50, 46, 48, 5, 7, 2, 3, 0, 3, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 2, 3, 0, 3, 10, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 1, 66, 22, 2, 3, 2, 1, 3, 4, 0, 8, 112, 111, 108, 108, 97, 98, 108, 101, 3, 0, 0, 2, 3, 2, 1, 6, 4, 0, 7, 110, 101, 116, 119, 111, 114, 107, 3, 0, 2, 2, 3, 2, 1, 8, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 4, 2, 3, 2, 1, 9, 4, 0, 10, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 3, 0, 6, 4, 0, 22, 114, 101, 115, 111, 108, 118, 101, 45, 97, 100, 100, 114, 101, 115, 115, 45, 115, 116, 114, 101, 97, 109, 3, 1, 1, 104, 8, 1, 107, 7, 1, 106, 1, 10, 1, 5, 1, 64, 1, 4, 115, 101, 108, 102, 9, 0, 11, 4, 0, 51, 91, 109, 101, 116, 104, 111, 100, 93, 114, 101, 115, 111, 108, 118, 101, 45, 97, 100, 100, 114, 101, 115, 115, 45, 115, 116, 114, 101, 97, 109, 46, 114, 101, 115, 111, 108, 118, 101, 45, 110, 101, 120, 116, 45, 97, 100, 100, 114, 101, 115, 115, 1, 12, 1, 105, 1, 1, 64, 1, 4, 115, 101, 108, 102, 9, 0, 13, 4, 0, 40, 91, 109, 101, 116, 104, 111, 100, 93, 114, 101, 115, 111, 108, 118, 101, 45, 97, 100, 100, 114, 101, 115, 115, 45, 115, 116, 114, 101, 97, 109, 46, 115, 117, 98, 115, 99, 114, 105, 98, 101, 1, 14, 1, 104, 3, 1, 105, 8, 1, 106, 1, 16, 1, 5, 1, 64, 2, 7, 110, 101, 116, 119, 111, 114, 107, 15, 4, 110, 97, 109, 101, 115, 0, 17, 4, 0, 17, 114, 101, 115, 111, 108, 118, 101, 45, 97, 100, 100, 114, 101, 115, 115, 101, 115, 1, 18, 3, 1, 33, 119, 97, 115, 105, 58, 115, 111, 99, 107, 101, 116, 115, 47, 105, 112, 45, 110, 97, 109, 101, 45, 108, 111, 111, 107, 117, 112, 64, 48, 46, 50, 46, 48, 5, 10, 1, 66, 15, 2, 3, 2, 1, 3, 4, 0, 8, 112, 111, 108, 108, 97, 98, 108, 101, 3, 0, 0, 1, 119, 4, 0, 7, 105, 110, 115, 116, 97, 110, 116, 3, 0, 2, 1, 119, 4, 0, 8, 100, 117, 114, 97, 116, 105, 111, 110, 3, 0, 4, 1, 64, 0, 0, 3, 4, 0, 3, 110, 111, 119, 1, 6, 1, 64, 0, 0, 5, 4, 0, 10, 114, 101, 115, 111, 108, 117, 116, 105, 111, 110, 1, 7, 1, 105, 1, 1, 64, 1, 4, 119, 104, 101, 110, 3, 0, 8, 4, 0, 17, 115, 117, 98, 115, 99, 114, 105, 98, 101, 45, 105, 110, 115, 116, 97, 110, 116, 1, 9, 1, 64, 1, 4, 119, 104, 101, 110, 5, 0, 8, 4, 0, 18, 115, 117, 98, 115, 99, 114, 105, 98, 101, 45, 100, 117, 114, 97, 116, 105, 111, 110, 1, 10, 3, 1, 33, 119, 97, 115, 105, 58, 99, 108, 111, 99, 107, 115, 47, 109, 111, 110, 111, 116, 111, 110, 105, 99, 45, 99, 108, 111, 99, 107, 64, 48, 46, 50, 46, 48, 5, 11, 2, 3, 0, 2, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 2, 3, 0, 2, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 2, 3, 0, 6, 8, 100, 117, 114, 97, 116, 105, 111, 110, 2, 3, 0, 3, 17, 105, 112, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101, 115, 115, 2, 3, 0, 3, 17, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 1, 66, 84, 2, 3, 2, 1, 12, 4, 0, 12, 105, 110, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 3, 0, 0, 2, 3, 2, 1, 13, 4, 0, 13, 111, 117, 116, 112, 117, 116, 45, 115, 116, 114, 101, 97, 109, 3, 0, 2, 2, 3, 2, 1, 3, 4, 0, 8, 112, 111, 108, 108, 97, 98, 108, 101, 3, 0, 4, 2, 3, 2, 1, 14, 4, 0, 8, 100, 117, 114, 97, 116, 105, 111, 110, 3, 0, 6, 2, 3, 2, 1, 6, 4, 0, 7, 110, 101, 116, 119, 111, 114, 107, 3, 0, 8, 2, 3, 2, 1, 8, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 10, 2, 3, 2, 1, 15, 4, 0, 17, 105, 112, 45, 115, 111, 99, 107, 101, 116, 45, 97, 100, 100, 114, 101, 115, 115, 3, 0, 12, 2, 3, 2, 1, 16, 4, 0, 17, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 3, 0, 14, 1, 109, 3, 7, 114, 101, 99, 101, 105, 118, 101, 4, 115, 101, 110, 100, 4, 98, 111, 116, 104, 4, 0, 13, 115, 104, 117, 116, 100, 111, 119, 110, 45, 116, 121, 112, 101, 3, 0, 16, 4, 0, 10, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 3, 1, 1, 104, 18, 1, 104, 9, 1, 106, 0, 1, 11, 1, 64, 3, 4, 115, 101, 108, 102, 19, 7, 110, 101, 116, 119, 111, 114, 107, 20, 13, 108, 111, 99, 97, 108, 45, 97, 100, 100, 114, 101, 115, 115, 13, 0, 21, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 116, 97, 114, 116, 45, 98, 105, 110, 100, 1, 22, 1, 64, 1, 4, 115, 101, 108, 102, 19, 0, 21, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 102, 105, 110, 105, 115, 104, 45, 98, 105, 110, 100, 1, 23, 1, 64, 3, 4, 115, 101, 108, 102, 19, 7, 110, 101, 116, 119, 111, 114, 107, 20, 14, 114, 101, 109, 111, 116, 101, 45, 97, 100, 100, 114, 101, 115, 115, 13, 0, 21, 4, 0, 32, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 116, 97, 114, 116, 45, 99, 111, 110, 110, 101, 99, 116, 1, 24, 1, 105, 1, 1, 105, 3, 1, 111, 2, 25, 26, 1, 106, 1, 27, 1, 11, 1, 64, 1, 4, 115, 101, 108, 102, 19, 0, 28, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 102, 105, 110, 105, 115, 104, 45, 99, 111, 110, 110, 101, 99, 116, 1, 29, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 116, 97, 114, 116, 45, 108, 105, 115, 116, 101, 110, 1, 23, 4, 0, 32, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 102, 105, 110, 105, 115, 104, 45, 108, 105, 115, 116, 101, 110, 1, 23, 1, 105, 18, 1, 111, 3, 30, 25, 26, 1, 106, 1, 31, 1, 11, 1, 64, 1, 4, 115, 101, 108, 102, 19, 0, 32, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 97, 99, 99, 101, 112, 116, 1, 33, 1, 106, 1, 13, 1, 11, 1, 64, 1, 4, 115, 101, 108, 102, 19, 0, 34, 4, 0, 32, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 108, 111, 99, 97, 108, 45, 97, 100, 100, 114, 101, 115, 115, 1, 35, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 114, 101, 109, 111, 116, 101, 45, 97, 100, 100, 114, 101, 115, 115, 1, 35, 1, 64, 1, 4, 115, 101, 108, 102, 19, 0, 127, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 105, 115, 45, 108, 105, 115, 116, 101, 110, 105, 110, 103, 1, 36, 1, 64, 1, 4, 115, 101, 108, 102, 19, 0, 15, 4, 0, 33, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 1, 37, 1, 64, 2, 4, 115, 101, 108, 102, 19, 5, 118, 97, 108, 117, 101, 119, 0, 21, 4, 0, 42, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 101, 116, 45, 108, 105, 115, 116, 101, 110, 45, 98, 97, 99, 107, 108, 111, 103, 45, 115, 105, 122, 101, 1, 38, 1, 106, 1, 127, 1, 11, 1, 64, 1, 4, 115, 101, 108, 102, 19, 0, 39, 4, 0, 37, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 107, 101, 101, 112, 45, 97, 108, 105, 118, 101, 45, 101, 110, 97, 98, 108, 101, 100, 1, 40, 1, 64, 2, 4, 115, 101, 108, 102, 19, 5, 118, 97, 108, 117, 101, 127, 0, 21, 4, 0, 41, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 101, 116, 45, 107, 101, 101, 112, 45, 97, 108, 105, 118, 101, 45, 101, 110, 97, 98, 108, 101, 100, 1, 41, 1, 106, 1, 7, 1, 11, 1, 64, 1, 4, 115, 101, 108, 102, 19, 0, 42, 4, 0, 39, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 107, 101, 101, 112, 45, 97, 108, 105, 118, 101, 45, 105, 100, 108, 101, 45, 116, 105, 109, 101, 1, 43, 1, 64, 2, 4, 115, 101, 108, 102, 19, 5, 118, 97, 108, 117, 101, 7, 0, 21, 4, 0, 43, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 101, 116, 45, 107, 101, 101, 112, 45, 97, 108, 105, 118, 101, 45, 105, 100, 108, 101, 45, 116, 105, 109, 101, 1, 44, 4, 0, 38, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 107, 101, 101, 112, 45, 97, 108, 105, 118, 101, 45, 105, 110, 116, 101, 114, 118, 97, 108, 1, 43, 4, 0, 42, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 101, 116, 45, 107, 101, 101, 112, 45, 97, 108, 105, 118, 101, 45, 105, 110, 116, 101, 114, 118, 97, 108, 1, 44, 1, 106, 1, 121, 1, 11, 1, 64, 1, 4, 115, 101, 108, 102, 19, 0, 45, 4, 0, 35, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 107, 101, 101, 112, 45, 97, 108, 105, 118, 101, 45, 99, 111, 117, 110, 116, 1, 46, 1, 64, 2, 4, 115, 101, 108, 102, 19, 5, 118, 97, 108, 117, 101, 121, 0, 21, 4, 0, 39, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 101, 116, 45, 107, 101, 101, 112, 45, 97, 108, 105, 118, 101, 45, 99, 111, 117, 110, 116, 1, 47, 1, 106, 1, 125, 1, 11, 1, 64, 1, 4, 115, 101, 108, 102, 19, 0, 48, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 104, 111, 112, 45, 108, 105, 109, 105, 116, 1, 49, 1, 64, 2, 4, 115, 101, 108, 102, 19, 5, 118, 97, 108, 117, 101, 125, 0, 21, 4, 0, 32, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 101, 116, 45, 104, 111, 112, 45, 108, 105, 109, 105, 116, 1, 50, 1, 106, 1, 119, 1, 11, 1, 64, 1, 4, 115, 101, 108, 102, 19, 0, 51, 4, 0, 38, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 114, 101, 99, 101, 105, 118, 101, 45, 98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 1, 52, 4, 0, 42, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 101, 116, 45, 114, 101, 99, 101, 105, 118, 101, 45, 98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 1, 38, 4, 0, 35, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 101, 110, 100, 45, 98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 1, 52, 4, 0, 39, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 101, 116, 45, 115, 101, 110, 100, 45, 98, 117, 102, 102, 101, 114, 45, 115, 105, 122, 101, 1, 38, 1, 105, 5, 1, 64, 1, 4, 115, 101, 108, 102, 19, 0, 53, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 117, 98, 115, 99, 114, 105, 98, 101, 1, 54, 1, 64, 2, 4, 115, 101, 108, 102, 19, 13, 115, 104, 117, 116, 100, 111, 119, 110, 45, 116, 121, 112, 101, 17, 0, 21, 4, 0, 27, 91, 109, 101, 116, 104, 111, 100, 93, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 46, 115, 104, 117, 116, 100, 111, 119, 110, 1, 55, 3, 1, 22, 119, 97, 115, 105, 58, 115, 111, 99, 107, 101, 116, 115, 47, 116, 99, 112, 64, 48, 46, 50, 46, 48, 5, 17, 2, 3, 0, 7, 10, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 1, 66, 12, 2, 3, 2, 1, 6, 4, 0, 7, 110, 101, 116, 119, 111, 114, 107, 3, 0, 0, 2, 3, 2, 1, 8, 4, 0, 10, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 3, 0, 2, 2, 3, 2, 1, 16, 4, 0, 17, 105, 112, 45, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 3, 0, 4, 2, 3, 2, 1, 18, 4, 0, 10, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 3, 0, 6, 1, 105, 7, 1, 106, 1, 8, 1, 3, 1, 64, 1, 14, 97, 100, 100, 114, 101, 115, 115, 45, 102, 97, 109, 105, 108, 121, 5, 0, 9, 4, 0, 17, 99, 114, 101, 97, 116, 101, 45, 116, 99, 112, 45, 115, 111, 99, 107, 101, 116, 1, 10, 3, 1, 36, 119, 97, 115, 105, 58, 115, 111, 99, 107, 101, 116, 115, 47, 116, 99, 112, 45, 99, 114, 101, 97, 116, 101, 45, 115, 111, 99, 107, 101, 116, 64, 48, 46, 50, 46, 48, 5, 19, 1, 66, 115, 1, 114, 2, 7, 115, 101, 99, 111, 110, 100, 115, 121, 8, 110, 115, 101, 99, 111, 110, 100, 115, 121, 4, 0, 4, 116, 105, 109, 101, 3, 0, 0, 1, 111, 2, 121, 121, 1, 114, 13, 9, 97, 116, 116, 114, 45, 116, 121, 112, 101, 121, 9, 102, 105, 108, 101, 45, 109, 111, 100, 101, 121, 5, 110, 108, 105, 110, 107, 121, 3, 117, 105, 100, 121, 3, 103, 105, 100, 121, 8, 102, 105, 108, 101, 115, 105, 122, 101, 119, 4, 117, 115, 101, 100, 119, 9, 115, 112, 101, 99, 45, 100, 97, 116, 97, 2, 4, 102, 115, 105, 100, 119, 6, 102, 105, 108, 101, 105, 100, 119, 5, 97, 116, 105, 109, 101, 1, 5, 109, 116, 105, 109, 101, 1, 5, 99, 116, 105, 109, 101, 1, 4, 0, 4, 97, 116, 116, 114, 3, 0, 3, 1, 107, 4, 1, 114, 7, 4, 97, 116, 116, 114, 5, 7, 108, 105, 110, 107, 109, 97, 120, 121, 8, 110, 97, 109, 101, 45, 109, 97, 120, 121, 8, 110, 111, 45, 116, 114, 117, 110, 99, 127, 16, 99, 104, 111, 119, 110, 45, 114, 101, 115, 116, 114, 105, 99, 116, 101, 100, 127, 16, 99, 97, 115, 101, 45, 105, 110, 115, 101, 110, 115, 105, 116, 105, 118, 101, 127, 15, 99, 97, 115, 101, 45, 112, 114, 101, 115, 101, 114, 118, 105, 110, 103, 127, 4, 0, 9, 112, 97, 116, 104, 45, 99, 111, 110, 102, 3, 0, 6, 1, 114, 3, 6, 102, 105, 108, 101, 105, 100, 119, 9, 102, 105, 108, 101, 45, 110, 97, 109, 101, 115, 6, 99, 111, 111, 107, 105, 101, 119, 4, 0, 13, 114, 101, 97, 100, 100, 105, 114, 45, 101, 110, 116, 114, 121, 3, 0, 8, 1, 112, 125, 1, 114, 5, 6, 102, 105, 108, 101, 105, 100, 119, 9, 102, 105, 108, 101, 45, 110, 97, 109, 101, 115, 6, 99, 111, 111, 107, 105, 101, 119, 4, 97, 116, 116, 114, 5, 6, 104, 97, 110, 100, 108, 101, 10, 4, 0, 17, 114, 101, 97, 100, 100, 105, 114, 112, 108, 117, 115, 45, 101, 110, 116, 114, 121, 3, 0, 11, 1, 107, 122, 1, 114, 2, 14, 110, 102, 115, 45, 101, 114, 114, 111, 114, 45, 99, 111, 100, 101, 13, 7, 109, 101, 115, 115, 97, 103, 101, 115, 4, 0, 5, 101, 114, 114, 111, 114, 3, 0, 14, 4, 0, 9, 110, 102, 115, 45, 109, 111, 117, 110, 116, 3, 1, 1, 104, 16, 1, 106, 0, 1, 15, 1, 64, 1, 4, 115, 101, 108, 102, 17, 0, 18, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 110, 117, 108, 108, 45, 111, 112, 1, 19, 1, 106, 1, 121, 1, 15, 1, 64, 3, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 4, 109, 111, 100, 101, 121, 0, 20, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 97, 99, 99, 101, 115, 115, 1, 21, 1, 64, 3, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 4, 109, 111, 100, 101, 121, 0, 20, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 97, 99, 99, 101, 115, 115, 45, 112, 97, 116, 104, 1, 22, 1, 64, 3, 4, 115, 101, 108, 102, 17, 5, 115, 101, 113, 105, 100, 121, 7, 115, 116, 97, 116, 101, 105, 100, 119, 0, 18, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 99, 108, 111, 115, 101, 1, 23, 1, 64, 4, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 6, 111, 102, 102, 115, 101, 116, 119, 5, 99, 111, 117, 110, 116, 121, 0, 18, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 99, 111, 109, 109, 105, 116, 1, 24, 1, 64, 4, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 6, 111, 102, 102, 115, 101, 116, 119, 5, 99, 111, 117, 110, 116, 121, 0, 18, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 99, 111, 109, 109, 105, 116, 45, 112, 97, 116, 104, 1, 25, 1, 106, 1, 10, 1, 15, 1, 64, 4, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 8, 102, 105, 108, 101, 110, 97, 109, 101, 115, 4, 109, 111, 100, 101, 121, 0, 26, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 99, 114, 101, 97, 116, 101, 1, 27, 1, 64, 3, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 4, 109, 111, 100, 101, 121, 0, 26, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 99, 114, 101, 97, 116, 101, 45, 112, 97, 116, 104, 1, 28, 1, 64, 2, 4, 115, 101, 108, 102, 17, 8, 99, 108, 105, 101, 110, 116, 105, 100, 119, 0, 18, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 100, 101, 108, 101, 103, 112, 117, 114, 103, 101, 1, 29, 1, 64, 2, 4, 115, 101, 108, 102, 17, 7, 115, 116, 97, 116, 101, 105, 100, 119, 0, 18, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 100, 101, 108, 101, 103, 114, 101, 116, 117, 114, 110, 1, 30, 1, 106, 1, 4, 1, 15, 1, 64, 2, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 0, 31, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 103, 101, 116, 97, 116, 116, 114, 1, 32, 1, 64, 2, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 0, 31, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 103, 101, 116, 97, 116, 116, 114, 45, 112, 97, 116, 104, 1, 33, 1, 107, 1, 1, 107, 121, 1, 107, 119, 1, 64, 9, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 11, 103, 117, 97, 114, 100, 45, 99, 116, 105, 109, 101, 34, 4, 109, 111, 100, 101, 35, 3, 117, 105, 100, 35, 3, 103, 105, 100, 35, 4, 115, 105, 122, 101, 36, 5, 97, 116, 105, 109, 101, 34, 5, 109, 116, 105, 109, 101, 34, 0, 18, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 115, 101, 116, 97, 116, 116, 114, 1, 37, 1, 64, 9, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 13, 115, 112, 101, 99, 105, 102, 121, 45, 103, 117, 97, 114, 100, 127, 4, 109, 111, 100, 101, 35, 3, 117, 105, 100, 35, 3, 103, 105, 100, 35, 4, 115, 105, 122, 101, 36, 5, 97, 116, 105, 109, 101, 34, 5, 109, 116, 105, 109, 101, 34, 0, 18, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 115, 101, 116, 97, 116, 116, 114, 45, 112, 97, 116, 104, 1, 38, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 103, 101, 116, 102, 104, 1, 19, 1, 64, 4, 4, 115, 101, 108, 102, 17, 6, 115, 114, 99, 45, 102, 104, 10, 10, 100, 115, 116, 45, 100, 105, 114, 45, 102, 104, 10, 12, 100, 115, 116, 45, 102, 105, 108, 101, 110, 97, 109, 101, 115, 0, 31, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 108, 105, 110, 107, 1, 39, 1, 64, 3, 4, 115, 101, 108, 102, 17, 8, 115, 114, 99, 45, 112, 97, 116, 104, 115, 8, 100, 115, 116, 45, 112, 97, 116, 104, 115, 0, 31, 4, 0, 27, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 108, 105, 110, 107, 45, 112, 97, 116, 104, 1, 40, 1, 64, 4, 4, 115, 101, 108, 102, 17, 8, 115, 114, 99, 45, 112, 97, 116, 104, 115, 10, 100, 115, 116, 45, 100, 105, 114, 45, 102, 104, 10, 12, 100, 115, 116, 45, 102, 105, 108, 101, 110, 97, 109, 101, 115, 0, 26, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 115, 121, 109, 108, 105, 110, 107, 1, 41, 1, 64, 3, 4, 115, 101, 108, 102, 17, 8, 115, 114, 99, 45, 112, 97, 116, 104, 115, 8, 100, 115, 116, 45, 112, 97, 116, 104, 115, 0, 26, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 115, 121, 109, 108, 105, 110, 107, 45, 112, 97, 116, 104, 1, 42, 1, 106, 1, 115, 1, 15, 1, 64, 2, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 0, 43, 4, 0, 26, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 108, 105, 110, 107, 1, 44, 1, 64, 2, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 0, 43, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 108, 105, 110, 107, 45, 112, 97, 116, 104, 1, 45, 1, 64, 3, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 8, 102, 105, 108, 101, 110, 97, 109, 101, 115, 0, 26, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 108, 111, 111, 107, 117, 112, 1, 46, 1, 64, 2, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 0, 26, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 108, 111, 111, 107, 117, 112, 45, 112, 97, 116, 104, 1, 47, 1, 106, 1, 7, 1, 15, 1, 64, 2, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 0, 48, 4, 0, 26, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 112, 97, 116, 104, 99, 111, 110, 102, 1, 49, 1, 64, 2, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 0, 48, 4, 0, 31, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 112, 97, 116, 104, 99, 111, 110, 102, 45, 112, 97, 116, 104, 1, 50, 1, 64, 4, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 6, 111, 102, 102, 115, 101, 116, 119, 5, 99, 111, 117, 110, 116, 121, 0, 26, 4, 0, 22, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 1, 51, 1, 64, 4, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 6, 111, 102, 102, 115, 101, 116, 119, 5, 99, 111, 117, 110, 116, 121, 0, 26, 4, 0, 27, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 45, 112, 97, 116, 104, 1, 52, 1, 64, 4, 4, 115, 101, 108, 102, 17, 2, 102, 104, 10, 6, 111, 102, 102, 115, 101, 116, 119, 4, 100, 97, 116, 97, 10, 0, 20, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 119, 114, 105, 116, 101, 1, 53, 1, 64, 4, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 6, 111, 102, 102, 115, 101, 116, 119, 4, 100, 97, 116, 97, 10, 0, 20, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 119, 114, 105, 116, 101, 45, 112, 97, 116, 104, 1, 54, 1, 112, 9, 1, 106, 1, 55, 1, 15, 1, 64, 2, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 0, 56, 4, 0, 25, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 100, 105, 114, 1, 57, 1, 64, 2, 4, 115, 101, 108, 102, 17, 8, 100, 105, 114, 45, 112, 97, 116, 104, 115, 0, 56, 4, 0, 30, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 100, 105, 114, 45, 112, 97, 116, 104, 1, 58, 1, 112, 12, 1, 106, 1, 59, 1, 15, 1, 64, 2, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 0, 60, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 100, 105, 114, 112, 108, 117, 115, 1, 61, 1, 64, 2, 4, 115, 101, 108, 102, 17, 8, 100, 105, 114, 45, 112, 97, 116, 104, 115, 0, 60, 4, 0, 34, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 97, 100, 100, 105, 114, 112, 108, 117, 115, 45, 112, 97, 116, 104, 1, 62, 1, 64, 4, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 7, 100, 105, 114, 110, 97, 109, 101, 115, 4, 109, 111, 100, 101, 121, 0, 26, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 109, 107, 100, 105, 114, 1, 63, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 109, 107, 100, 105, 114, 45, 112, 97, 116, 104, 1, 28, 1, 64, 3, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 8, 102, 105, 108, 101, 110, 97, 109, 101, 115, 0, 18, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 109, 111, 118, 101, 1, 64, 1, 64, 2, 4, 115, 101, 108, 102, 17, 4, 112, 97, 116, 104, 115, 0, 18, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 109, 111, 118, 101, 45, 112, 97, 116, 104, 1, 65, 1, 64, 3, 4, 115, 101, 108, 102, 17, 6, 100, 105, 114, 45, 102, 104, 10, 7, 100, 105, 114, 110, 97, 109, 101, 115, 0, 18, 4, 0, 23, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 109, 100, 105, 114, 1, 66, 4, 0, 28, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 109, 100, 105, 114, 45, 112, 97, 116, 104, 1, 65, 1, 64, 5, 4, 115, 101, 108, 102, 17, 11, 102, 114, 111, 109, 45, 100, 105, 114, 45, 102, 104, 10, 13, 102, 114, 111, 109, 45, 102, 105, 108, 101, 110, 97, 109, 101, 115, 9, 116, 111, 45, 100, 105, 114, 45, 102, 104, 10, 11, 116, 111, 45, 102, 105, 108, 101, 110, 97, 109, 101, 115, 0, 18, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 110, 97, 109, 101, 1, 67, 1, 64, 3, 4, 115, 101, 108, 102, 17, 9, 102, 114, 111, 109, 45, 112, 97, 116, 104, 115, 7, 116, 111, 45, 112, 97, 116, 104, 115, 0, 18, 4, 0, 29, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 114, 101, 110, 97, 109, 101, 45, 112, 97, 116, 104, 1, 68, 4, 0, 24, 91, 109, 101, 116, 104, 111, 100, 93, 110, 102, 115, 45, 109, 111, 117, 110, 116, 46, 117, 109, 111, 117, 110, 116, 1, 19, 1, 105, 16, 1, 106, 1, 197, 0, 1, 15, 1, 64, 1, 3, 117, 114, 108, 115, 0, 198, 0, 4, 0, 19, 112, 97, 114, 115, 101, 45, 117, 114, 108, 45, 97, 110, 100, 45, 109, 111, 117, 110, 116, 1, 71, 4, 1, 20, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 110, 102, 115, 45, 114, 115, 47, 110, 102, 115, 5, 20, 4, 1, 23, 99, 111, 109, 112, 111, 110, 101, 110, 116, 58, 110, 102, 115, 45, 114, 115, 47, 110, 102, 115, 45, 114, 115, 4, 0, 11, 12, 1, 0, 6, 110, 102, 115, 45, 114, 115, 3, 2, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];
    
    #[inline(never)]
    #[doc(hidden)]
    #[cfg(target_arch = "wasm32")]
    pub fn __link_section() {}
    